<?xml version="1.0" encoding="utf-8"?>
<RefData version="1.0" exporter="EA.25">
	<DataSet name="Automation Scripts" table="t_script" filter="ScriptName='#ScriptName#' and ScriptCategory='#ScriptCategory#'" stoplist=";ScriptID;">
		<DataRow>
			<Column name="ScriptID" value="1"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{F5CBB10C-B43F-4998-B85E-76D19478930E}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;PROJBROWSER&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="SOSI model validation"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="2"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{AAAD71AE-72FD-478a-9FDF-6D800F8F2F65}"/>
			<Column name="ScriptAuthor" value="{F5CBB10C-B43F-4998-B85E-76D19478930E}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;SOSI model validation&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="?option explicit &#xA; &#xA; !INC Local Scripts.EAConstants-VBScript &#xA; &#xA;' &#xA;' This script contains code from the default Project Browser template. &#xA;' If you wish to modify this template, it is located in the Config\Script Templates &#xA;' directory of your EA install path.    &#xA;' &#xA;' Script Name: SOSI model validation &#xA;' Author: Section for technology and standardization - Norwegian Mapping Authority&#xA;' Version: 1.1&#xA;' Date: 2017-01-23 &#xA;' Purpose: Validate model elements according to rules defined in the standard SOSI Regler for UML-modellering 5.0 &#xA;' Implemented rules: &#xA;'	/krav/3:  &#xA;'			Find elements (classes, attributes, navigable association roles, operations, datatypes)  &#xA;'	        without definition (notes/rolenotes) in the selected package and subpackages &#xA;'&#xA;'	/krav/6:		&#xA;'			Iso 19103 Requirement 6 - NCNames in codelist codes.&#xA;' 	/krav/7:	    &#xA;'			Iso 19103 Requirement 7 - definition of codelist codes.&#xA;'  	/krav/10: &#xA;'			Check if all navigable association ends have cardinality &#xA;'	/krav/11: &#xA;'			Check if all navigable association ends have role names &#xA;'	/krav/12: &#xA;'			If datatypes have associations then the datatype shall only be target in a composition &#xA;'  	/krav/14:&#xA;'			Iso 19103 Requirement 14 -inherit from same stereotypes&#xA;'  	/krav/15:&#xA;'			Iso 19103 Requirement 15 -known stereotypes&#xA;'  	/krav/16&#xA;'			Iso 19103 Requirement 16 -legal NCNames case-insesnitively unique within their namespace&#xA;'  	/krav/18&#xA;'			Iso 19103 Requirement 18 -all elements shall show all structures in at least one diagram&#xA;'			Current version test all classes and their attributes in diagrams, not yet roles and inheritance.&#xA;'	/krav/definisjoner: &#xA;'			Same as krav/3 but checks also for definitions of packages and constraints&#xA;'			The part that checks definitions of constraints is implemented in sub checkConstraint	&#xA;'			The rest is implemented in sub checkDefinitions&#xA;'	/krav/eksternKodeliste&#xA;' 			Check if the coedlist has an asDictionary with value &quot;true&quot;, if so, checks if the taggedValue &quot;codeList&quot; exist and if the value is valid or not.&#xA;'			Some parts missing. 2 subs.&#xA;'	/krav/enkelArv&#xA;' 			To check each class for multiple inheritance &#xA;'	/krav/flerspråklighet/element:		&#xA;' 			if tagged value: &quot;designation&quot;, &quot;description&quot; or &quot;definition&quot; exists, the value of the tag must end with &quot;@&lt;language-code&gt;&quot;. &#xA;' 			Checks attributes, operations, (roles), (constraints) and objecttypes &#xA;'	/krav/flerspråklighet/pakke:&#xA;'			Check if the ApplicationSchema-package got a tagged value named &quot;language&quot; (error message if that is not the case) &#xA;'			and if the value of it is empty or not (error message if empty). &#xA;' 			And if there are designation-tags, checks that they have correct structure: &quot;{name}&quot;@{language}&#xA;' 	/krav/hoveddiagram/detaljering/navnining &#xA;'			Check if a package with stereotype applicationSchema has more than one diagram called &quot;Hoveddiagram&quot;, if so, checks that theres more characters&#xA;' 			in the name after &quot;Hoveddiagram&quot;. If there is several &quot;Hoveddiagram&quot;s and one or more diagrams just named &quot;Hoveddiagram&quot; it returns an error. &#xA;'  	/krav/hoveddiagram/navning: &#xA;'			Check if an application-schema has less than one diagram named &quot;Hoveddiagram&quot;, if so, returns an error &#xA;' 	/krav/oversiktsdiagram:&#xA;'			Check that a package with more than one diagram with name starting with &quot;Hoveddiagram&quot; also has at least one diagram called &quot;Oversiktsdiagram&quot; &#xA;'	/krav/navning (partially): &#xA;'			Check if names of attributes, operations, roles start with lower case and names of packages,  &#xA;'			classes and associations start with upper case &#xA;'	/krav/SOSI-modellregister/applikasjonsskjema/status&#xA;'			Check if the ApplicationSchema-package got a tagged value named &quot;SOSI_modellstatus&quot; and checks if it is a valid value&#xA;'   /krav/SOSI-modellregister/applikasjonsskjema/versjonsnummer&#xA;'           Check if the last part of the package name is a version number.  Ignores the text &quot;Utkast&quot; for this check&#xA;'   /krav/SOSI-modellregister/applikasjonsskjema/standard/pakkenavn/utkast&#xA;'			Check if packages with SOSI_modellstatus tag &quot;utkast&quot; has &quot;Utkast&quot; in package name. Also do the reverse check.&#xA;'  	/req/uml/constraint&#xA;'			To check if a constraint lacks name or definition. &#xA;'  	/req/uml/packaging:&#xA;'     		To check if the value of the version-tag (tagged values) for an ApplicationSchema-package is empty or not. &#xA;'   /anbefaling/1:&#xA;'			Checks every initial values in codeLists and enumerations for a package. If one or more initial values are numeric in one list, &#xA;' 			it return a warning message. &#xA;'  	/anbefaling/styleGuide:&#xA;'			Checks that the stereotype for packages and elements got the right use of lower- and uppercase, if not, return an error. Stereotypes to be cheked:&#xA;'			CodeList, dataType, enumeration, interface, Leaf, Union, FeatureType, ApplicationSchema&#xA;'	/req/uml/profile      &#xA;'			from iso 19109 -well known types for all attributes, including iso 19103 Requirement 22 and 25&#xA;'	/req/uml/feature&#xA;'			featureType classes shall have unique names within the applicationSchema		&#xA;'	/krav/taggedValueSpråk 	&#xA;'			ApplicationSchema packages shall have a language tag, designation tag and definition tag. Partially implemented, does not check definition tag&#xA;'&#xA;' &#xA;'------------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Project Browser Script main function &#xA; &#xA; sub OnProjectBrowserScript() &#xA; 	 &#xA;	Repository.EnsureOutputVisible(&quot;Script&quot;)&#xA; 	' Get the type of element selected in the Project Browser &#xA; 	dim treeSelectedType &#xA; 	treeSelectedType = Repository.GetTreeSelectedItemType() &#xA; 	 &#xA; 	' Handling Code: Uncomment any types you wish this script to support &#xA; 	' NOTE: You can toggle comments on multiple lines that are currently &#xA; 	' selected with [CTRL]+[SHIFT]+[C]. &#xA; 	select case treeSelectedType &#xA; 	 &#xA; '		case otElement &#xA; '			' Code for when an element is selected &#xA; '			dim theElement as EA.Element &#xA; '			set theElement = Repository.GetTreeSelectedObject() &#xA; '					 &#xA; 		case otPackage &#xA; 			' Code for when a package is selected &#xA; 			dim thePackage as EA.Package &#xA; 			set thePackage = Repository.GetTreeSelectedObject() &#xA; 			'check if the selected package has stereotype applicationSchema &#xA; 			if UCase(thePackage.element.stereotype) = UCase(&quot;applicationSchema&quot;) then &#xA;				&#xA;				dim box, mess&#xA;				'mess = 	&quot;Model validation 2016-08-19 Logging errors and warnings.&quot;&amp;Chr(13)&amp;Chr(10)&#xA;				mess = &quot;Model validation based on requirements and recommendations in SOSI standard 'Regler for UML-modellering 5.0'&quot;&amp;Chr(13)&amp;Chr(10)&#xA;				mess = mess + &quot;&quot;&amp;Chr(13)&amp;Chr(10)&#xA;				mess = mess + &quot;Please find a list with the implemented rules in this script's source code (line 15++).&quot;&amp;Chr(13)&amp;Chr(10)&#xA;				'mess= mess +  &quot;/krav/3 - elements with definition.&quot;&amp;Chr(13)&amp;Chr(10)&#xA;				'mess = mess + &quot;/krav/definisjoner - packages and constraints with definition.&quot;&amp;Chr(13)&amp;Chr(10)&#xA;				'mess = mess + &quot;/krav/6 (Iso 19103 Req 6) - NCNames for codes.&quot;&amp;Chr(13)&amp;Chr(10)&#xA;				'mess = mess + &quot;/krav/7 (Iso 19103 Req 7) - definition on codes.&quot;&amp;Chr(13)&amp;Chr(10)&#xA;				'mess = mess + &quot;/krav/10	(Iso 19103 Req 10) - multiplicity.&quot;&amp;Chr(13)&amp;Chr(10)&#xA;				'mess = mess + &quot;/krav/11	(Iso 19103 Req 11) - role names.&quot;&amp;Chr(13)&amp;Chr(10)&#xA;				'mess = mess + &quot;/krav/flerspråklighet/pakke - tagged value 'language'.&quot;&amp;Chr(13)&amp;Chr(10)&#xA;				'mess = mess + &quot;/krav/12	(Iso 19103 Req 12) - datatypes target in composition.&quot;&amp;Chr(13)&amp;Chr(10)&#xA;				'mess = mess + &quot;/krav/enkelArv - single inheritance.&quot;&amp;Chr(13)&amp;Chr(10)&#xA;				'mess = mess + &quot;/krav/Navning - all names CamelCase.&quot;&amp;Chr(13)&amp;Chr(10)&#xA;				'mess = mess + &quot;/anbefaling/1 (Iso 19103 Rec 1) - meaningful initial values.&quot;&amp;Chr(13)&amp;Chr(10)&#xA;				'mess = mess + &quot;/req/uml/packaging (Iso 19109) - tagged value 'version'.&quot;&amp;Chr(13)&amp;Chr(10)&#xA;				'mess = mess + &quot;/krav/SOSI-modellregister - known SOSI model registry status codes.&quot;&amp;Chr(13)&amp;Chr(10)&#xA;				'mess = mess + &quot;/krav/14	(Iso 19103 Req 14) - inherit from same stereotypes.&quot;&amp;Chr(13)&amp;Chr(10)&#xA;				'mess = mess + &quot;/krav/15	(Iso 19103 Req 15) - known stereotypes.&quot;&amp;Chr(13)&amp;Chr(10)&#xA;				'mess = mess + &quot;/krav/16	(Iso 19103 Req 16) - legal NCNames case-insensitively unique.&quot;&amp;Chr(13)&amp;Chr(10)&#xA;				'mess = mess + &quot;/req/uml/profile	(Iso 19103, 19107, 19109) - well known types.&quot;&amp;Chr(13)&amp;Chr(10)&#xA;				mess = mess + &quot;&quot;&amp;Chr(13)&amp;Chr(10)&#xA;				mess = mess + &quot;Starts model validation for package [&quot; &amp; thePackage.Name &amp;&quot;].&quot;&amp;Chr(13)&amp;Chr(10)&#xA;&#xA;				box = Msgbox (mess, vbOKCancel, &quot;SOSI model validation 1.1&quot;)&#xA;				select case box&#xA;					case vbOK&#xA;						'inputBoxGUI to receive user input regarding the log level&#xA;						dim logLevelFromInputBox, logLevelInputBoxText, correctInput, abort&#xA;						logLevelInputBoxText = &quot;Please select the log level.&quot;&amp;Chr(13)&amp;Chr(10)&#xA;						logLevelInputBoxText = logLevelInputBoxText+ &quot;&quot;&amp;Chr(13)&amp;Chr(10)&#xA;						logLevelInputBoxText = logLevelInputBoxText+ &quot;&quot;&amp;Chr(13)&amp;Chr(10)&#xA;						logLevelInputBoxText = logLevelInputBoxText+ &quot;E - Error log level: logs error messages only.&quot;&amp;Chr(13)&amp;Chr(10)&#xA;						logLevelInputBoxText = logLevelInputBoxText+ &quot;&quot;&amp;Chr(13)&amp;Chr(10)&#xA;						logLevelInputBoxText = logLevelInputBoxText+ &quot;W - Warning log level (recommended): logs error and warning messages.&quot;&amp;Chr(13)&amp;Chr(10)&#xA;						logLevelInputBoxText = logLevelInputBoxText+ &quot;&quot;&amp;Chr(13)&amp;Chr(10)&#xA;						logLevelInputBoxText = logLevelInputBoxText+ &quot;Enter E or W:&quot;&amp;Chr(13)&amp;Chr(10)&#xA;						correctInput = false&#xA;						abort = false&#xA;						do while not correctInput&#xA;						&#xA;							logLevelFromInputBox = InputBox(logLevelInputBoxText, &quot;Select log level&quot;, &quot;W&quot;)&#xA;							select case true &#xA;								case UCase(logLevelFromInputBox) = &quot;E&quot;	&#xA;									'code for when E = Error log level has been selected, only Error messages will be shown in the Script Output window&#xA;									globalLogLevelIsWarning = false&#xA;									correctInput = true&#xA;								case UCase(logLevelFromInputBox) = &quot;W&quot;	&#xA;									'code for when W = Error log level has been selected, both Error and Warning messages will be shown in the Script Output window&#xA;									globalLogLevelIsWarning = true&#xA;									correctInput = true&#xA;								case IsEmpty(logLevelFromInputBox)&#xA;									'user pressed cancel or closed the dialog&#xA;									MsgBox &quot;Abort&quot;,64&#xA;									abort = true&#xA;									exit do&#xA;								case else&#xA;									MsgBox &quot;You made an incorrect selection! Please enter either 'E' or 'W'.&quot;,48&#xA;							end select&#xA;						&#xA;						loop&#xA;						&#xA;						if not abort then&#xA;							'For /krav/18:&#xA;							set startPackage = thePackage&#xA;							Set diaoList = CreateObject( &quot;System.Collections.Sortedlist&quot; )&#xA;							Set diagList = CreateObject( &quot;System.Collections.Sortedlist&quot; )&#xA;							recListDiagramObjects(thePackage)&#xA;&#xA;							Dim StartTime, EndTime, Elapsed&#xA;							StartTime = timer &#xA;							startPackageName = thePackage.Name&#xA;							FindInvalidElementsInPackage(thePackage) &#xA;							Elapsed = formatnumber((Timer - StartTime),2)&#xA;							'------------------------------------------------------------------ &#xA;							'---Check global variables--- &#xA;							'------------------------------------------------------------------ &#xA;	&#xA;							'check uniqueness of featureType names&#xA;							checkUniqueFeatureTypeNames()&#xA;	&#xA;							'error-message for /krav/hoveddiagram/navning (sub procedure: CheckPackageForHoveddiagram)&#xA;							'if the applicationSchema package got less than one diagram with a name starting with &quot;Hoveddiagram&quot;, then return an error 	&#xA;							if 	not foundHoveddiagram  then&#xA;								Session.Output(&quot;Error: Neither package [&quot; &amp;startPackageName&amp; &quot;] nor any of it's subpackages has a diagram with a name starting with 'Hoveddiagram' [/krav/hoveddiagram/navning]&quot;)&#xA;								globalErrorCounter = globalErrorCounter + 1 &#xA;					&#xA;							end if 	&#xA;							&#xA;							'error-message for /krav/hoveddiagram/detaljering/navning (sub: FindHoveddiagramsInAS)&#xA;							'if the applicationSchema package got more than one diagram named &quot;Hoveddiagram&quot;, then return an error &#xA;							if numberOfHoveddiagram &gt; 1 or (numberOfHoveddiagram = 1 and numberOfHoveddiagramWithAdditionalInformationInTheName &gt; 0) then &#xA;								dim sumOfHoveddiagram &#xA;								sumOfHoveddiagram = numberOfHoveddiagram + numberOfHoveddiagramWithAdditionalInformationInTheName&#xA;								Session.Output(&quot;Error: Package [&quot;&amp;startPackageName&amp;&quot;] has &quot;&amp;sumOfHoveddiagram&amp;&quot; diagrams named 'Hoveddiagram' and &quot;&amp;numberOfHoveddiagram&amp;&quot; of them named exactly 'Hoveddiagram'. When there are multiple diagrams of that type additional information is expected in the diagrams' name. [/krav/hoveddiagram/detaljering/navning]&quot;)&#xA;								globalErrorCounter = globalErrorCounter + 1 &#xA;			&#xA;							end if &#xA;	&#xA;							&#xA;							Session.Output(&quot;Number of errors found: &quot; &amp; globalErrorCounter) &#xA;							if globalLogLevelIsWarning then&#xA;								Session.Output(&quot;Number of warnings found: &quot; &amp; globalWarningCounter)&#xA;							end if	&#xA;							Session.Output(&quot;Run time: &quot; &amp;Elapsed&amp; &quot; seconds&quot; )&#xA;						end if	&#xA;					case VBcancel&#xA;						'nothing to do						&#xA;				end select &#xA;			else &#xA; 				Msgbox &quot;Package [&quot; &amp; thePackage.Name &amp;&quot;] does not have stereotype «ApplicationSchema». Select a package with stereotype «ApplicationSchema» to start model validation.&quot; &#xA; 			end if &#xA; 			 &#xA; 			 &#xA; 			 &#xA;'		case otDiagram &#xA;'			' Code for when a diagram is selected &#xA;'			dim theDiagram as EA.Diagram &#xA;'			set theDiagram = Repository.GetTreeSelectedObject() &#xA;'			 &#xA;'		case otAttribute &#xA;'			' Code for when an attribute is selected &#xA;'			dim theAttribute as EA.Attribute &#xA;'			set theAttribute = Repository.GetTreeSelectedObject() &#xA;'			 &#xA;'		case otMethod &#xA;'			' Code for when a method is selected &#xA;'			dim theMethod as EA.Method &#xA;'			set theMethod = Repository.GetTreeSelectedObject() &#xA; 		 &#xA; 		case else &#xA; 			' Error message &#xA; 			Session.Prompt &quot;[Warning] You must select a package with stereotype ApplicationSchema in the Project Browser to start the validation.&quot;, promptOK &#xA; 			 &#xA; 	end select &#xA; 	 &#xA;end sub &#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA; &#xA; &#xA;'------------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;'Sub name: 		CheckDefinition&#xA;'Author: 		Magnus Karge&#xA;'Date: 			20160925 &#xA;'Purpose: 		Check if the provided argument for input parameter theObject fulfills the requirements in [krav/3]: &#xA;'				Find elements (classes, attributes, navigable association roles, operations, datatypes)  &#xA;'				without definition (notes/rolenotes) &#xA;'				and [krav/definisjoner]: &#xA;'				Find packages and constraints without definition&#xA;'@param[in] 	theObject (EA.ObjectType) The object to check,  &#xA;'				supposed to be one of the following types: EA.Attribute, EA.Method, EA.Connector, EA.Element &#xA; &#xA; sub CheckDefinition(theObject) &#xA; 	'Declare local variables &#xA; 	Dim currentAttribute as EA.Attribute &#xA; 	Dim currentMethod as EA.Method &#xA; 	Dim currentConnector as EA.Connector &#xA; 	Dim currentElement as EA.Element &#xA;	Dim currentPackage as EA.Package&#xA; 		 &#xA; 	Select Case theObject.ObjectType &#xA; 		Case otElement &#xA; 			' Code for when the function's parameter is an element &#xA; 			set currentElement = theObject &#xA; 			 &#xA; 			If currentElement.Notes = &quot;&quot; then &#xA; 				Session.Output(&quot;Error: Class [«&quot; &amp;getStereotypeOfClass(currentElement)&amp; &quot;» &quot;&amp; currentElement.Name &amp; &quot;] has no definition. [/krav/3] &amp; [/krav/definisjoner]&quot;)	 &#xA; 				globalErrorCounter = globalErrorCounter + 1 &#xA; 			end if &#xA; 		Case otAttribute &#xA; 			' Code for when the function's parameter is an attribute &#xA; 			 &#xA; 			set currentAttribute = theObject &#xA; 			 &#xA; 			'get the attribute's parent element &#xA; 			dim attributeParentElement as EA.Element &#xA; 			set attributeParentElement = Repository.GetElementByID(currentAttribute.ParentID) &#xA; 			 &#xA; 			if currentAttribute.Notes = &quot;&quot; then &#xA;				Session.Output( &quot;Error: Class [«&quot; &amp;getStereotypeOfClass(attributeParentElement)&amp; &quot;» &quot;&amp; attributeParentElement.Name &amp;&quot;] \ attribute [&quot; &amp; currentAttribute.Name &amp; &quot;] has no definition. [/krav/3] &amp; [/krav/definisjoner]&quot;) &#xA; 				globalErrorCounter = globalErrorCounter + 1 &#xA; 			end if &#xA; 			 &#xA; 		Case otMethod &#xA; 			' Code for when the function's parameter is a method &#xA; 			 &#xA; 			set currentMethod = theObject &#xA; 			 &#xA; 			'get the method's parent element, which is the class the method is part of &#xA; 			dim methodParentElement as EA.Element &#xA; 			set methodParentElement = Repository.GetElementByID(currentMethod.ParentID) &#xA; 			 &#xA; 			if currentMethod.Notes = &quot;&quot; then &#xA; 				Session.Output( &quot;Error: Class [«&quot; &amp;getStereotypeOfClass(methodParentElement)&amp; &quot;» &quot;&amp; methodParentElement.Name &amp;&quot;] \ operation [&quot; &amp; currentMethod.Name &amp; &quot;] has no definition. [/krav/3] &amp; [/krav/definisjoner]&quot;) &#xA; 				globalErrorCounter = globalErrorCounter + 1 &#xA; 			end if &#xA; 		Case otConnector &#xA; 			' Code for when the function's parameter is a connector &#xA; 			 &#xA; 			set currentConnector = theObject &#xA; 			 &#xA; 			'get the necessary connector attributes &#xA; 			dim sourceEndElementID &#xA; 			sourceEndElementID = currentConnector.ClientID 'id of the element on the source end of the connector &#xA; 			dim sourceEndNavigable  &#xA; 			sourceEndNavigable = currentConnector.ClientEnd.Navigable 'navigability on the source end of the connector &#xA; 			dim sourceEndName &#xA; 			sourceEndName = currentConnector.ClientEnd.Role 'role name on the source end of the connector &#xA; 			dim sourceEndDefinition &#xA; 			sourceEndDefinition = currentConnector.ClientEnd.RoleNote 'role definition on the source end of the connector &#xA; 								 &#xA; 			dim targetEndNavigable  &#xA; 			targetEndNavigable = currentConnector.SupplierEnd.Navigable 'navigability on the target end of the connector &#xA; 			dim targetEndName &#xA; 			targetEndName = currentConnector.SupplierEnd.Role 'role name on the target end of the connector &#xA; 			dim targetEndDefinition &#xA; 			targetEndDefinition = currentConnector.SupplierEnd.RoleNote 'role definition on the target end of the connector &#xA; &#xA; &#xA; 			dim sourceEndElement as EA.Element &#xA; 			 &#xA; 			if sourceEndNavigable = &quot;Navigable&quot; and sourceEndDefinition = &quot;&quot; then &#xA; 				'get the element on the source end of the connector &#xA; 				set sourceEndElement = Repository.GetElementByID(sourceEndElementID) &#xA; 				 &#xA;				Session.Output( &quot;Error: Class [«&quot; &amp;getStereotypeOfClass(sourceEndElement)&amp; &quot;» &quot;&amp; sourceEndElement.Name &amp;&quot;] \ association role [&quot; &amp; sourceEndName &amp; &quot;] has no definition. [/krav/3] &amp; [/krav/definisjoner]&quot;) &#xA; 				globalErrorCounter = globalErrorCounter + 1 &#xA; 			end if &#xA; 			 &#xA; 			if targetEndNavigable = &quot;Navigable&quot; and targetEndDefinition = &quot;&quot; then &#xA; 				'get the element on the source end of the connector (also source end element here because error message is related to the element on the source end of the connector) &#xA; 				set sourceEndElement = Repository.GetElementByID(sourceEndElementID) &#xA; 				 &#xA;				Session.Output( &quot;Error: Class [«&quot;&amp;getStereotypeOfClass(sourceEndElement)&amp;&quot;» &quot;&amp;sourceEndElement.Name &amp;&quot;] \ association role [&quot; &amp; targetEndName &amp; &quot;] has no definition. [/krav/3] &amp; [/krav/definisjoner]&quot;) &#xA; 				globalErrorCounter = globalErrorCounter + 1 &#xA; 			end if &#xA; 		Case otPackage &#xA; 			' Code for when the function's parameter is a package &#xA; 			 &#xA; 			set currentPackage = theObject &#xA; 			 &#xA; 			'check package definition &#xA;			if currentPackage.Notes = &quot;&quot; then &#xA;				Session.Output(&quot;Error: Package [&quot; &amp; currentPackage.Name &amp; &quot;] lacks a definition. [/krav/definisjoner]&quot;) &#xA;				globalErrorCounter = globalErrorCounter + 1 &#xA;			end if 	 &#xA; 		Case else		 &#xA; 			'TODO: need some type of exception handling here&#xA;			Session.Output( &quot;Debug: Function [CheckDefinition] started with invalid parameter.&quot;) &#xA; 	End Select &#xA; 	 &#xA;end sub &#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;'------------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;'Purpose: 		help function in order to set stereotype that is shown &#xA;'				in diagrams but not accessible as such via EAObjectAPI&#xA;'Used in sub: 	checkElementName&#xA;'@param[in]: theClass (EA.Element)&#xA;'returns: theClass's visible stereotype as character string, empty string if nothing found&#xA; function getStereotypeOfClass(theClass)&#xA;	dim visibleStereotype&#xA;	visibleStereotype = &quot;&quot;&#xA;	if (Ucase(theClass.Stereotype) = Ucase(&quot;featuretype&quot;)) OR (Ucase(theClass.Stereotype) = Ucase(&quot;codelist&quot;)) OR (Ucase(theClass.Stereotype) = Ucase(&quot;datatype&quot;)) OR (Ucase(theClass.Stereotype) = Ucase(&quot;enumeration&quot;)) then&#xA;		'param theClass is Classifier subtype Class with different stereotypes&#xA;		visibleStereotype = theClass.Stereotype&#xA;	elseif (Ucase(theClass.Type) = Ucase(&quot;enumeration&quot;)) OR (Ucase(theClass.Type) = Ucase(&quot;datatype&quot;))  then&#xA;		'param theClass is Classifier subtype DataType or Enumeration&#xA;		visibleStereotype = theClass.Type&#xA;	end if&#xA;	getStereotypeOfClass=visibleStereotype&#xA; end function&#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA; &#xA; &#xA;'------------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Sub name: checkElementName&#xA;' Author: Magnus Karge&#xA;' Date: 20160925 &#xA;' Purpose:  sub procedure to check if a given element's name is written correctly&#xA;' 			Implementation of /krav/navning&#xA;' 			&#xA;' @param[in]: theElement (EA.Element). The element to check. Can be class, enumeration, data type, attribute, operation, association, role or package&#xA; &#xA;sub checkElementName(theElement) &#xA;	&#xA;	select case theElement.ObjectType&#xA;		case otPackage&#xA;			'sub parameter is ObjectType oTPackage, check if first letter of the package's name is a capital letter &#xA; 			if not Left(theElement.Name,1) = UCase(Left(theElement.Name,1)) then &#xA;				Session.Output(&quot;Error: Package name [&quot; &amp; theElement.Name &amp; &quot;] shall start with capital letter. [/krav/navning]&quot;) &#xA;				globalErrorCounter = globalErrorCounter + 1 &#xA; 			end if&#xA;		case otElement&#xA;			'sub's parameter is ObjectType oTElement, check if first letter of the element's name is a capital letter (element covers class, enumeration, datatype)&#xA; 			if not Left(theElement.Name,1) = UCase(Left(theElement.Name,1)) then &#xA; 				Session.Output(&quot;Error: Class name [«&quot;&amp;getStereotypeOfClass(theElement)&amp;&quot;» &quot;&amp; theElement.Name &amp; &quot;] shall start with capital letter. [/krav/navning]&quot;) &#xA; 				globalErrorCounter = globalErrorCounter + 1 &#xA; 			end if &#xA;		case otAttribute&#xA;			'sub's parameter is ObjectType oTAttribute, check if first letter of the attribute's name is NOT a capital letter &#xA;			if not Left(theElement.Name,1) = LCase(Left(theElement.Name,1)) then &#xA;				dim attributeParentElement as EA.Element&#xA;				set attributeParentElement = Repository.GetElementByID(theElement.ParentID)&#xA;				Session.Output(&quot;Error: Attribute name [&quot; &amp; theElement.Name &amp; &quot;] in class [«&quot;&amp;getStereotypeOfClass(attributeParentElement)&amp;&quot;» &quot;&amp; attributeParentElement.Name &amp;&quot;] shall start with lowercase letter. [/krav/navning]&quot;) &#xA;				globalErrorCounter = globalErrorCounter + 1&#xA;			end if									&#xA; 		case otConnector&#xA;			dim connector as EA.Connector&#xA;			set connector = theElement&#xA;			'sub's parameter is ObjectType oTConnector, check if the association has a name (not necessarily the case), if so check if the name starts with a capital letter &#xA;			if not (connector.Name = &quot;&quot; OR len(connector.Name)=0) and not Left(connector.Name,1) = UCase(Left(connector.Name,1)) then &#xA;				dim associationSourceElement as EA.Element&#xA;				dim associationTargetElement as EA.Element&#xA;				set associationSourceElement = Repository.GetElementByID(connector.ClientID)&#xA;				set associationTargetElement = Repository.GetElementByID(connector.SupplierID)&#xA;				Session.Output(&quot;Error: Association name [&quot; &amp; connector.Name &amp; &quot;] between class [«&quot;&amp;getStereotypeOfClass(associationSourceElement)&amp;&quot;» &quot;&amp; associationSourceElement.Name &amp;&quot;] and class [«&quot;&amp;getStereotypeOfClass(associationTargetElement)&amp;&quot;» &quot; &amp; associationTargetElement.Name &amp; &quot;] shall start with capital letter. [/krav/navning]&quot;) &#xA;				globalErrorCounter = globalErrorCounter + 1 &#xA;			end if &#xA;		'case otOperation&#xA;		'case otRole&#xA;	end select	&#xA;end sub&#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;'------------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Sub name: findMultipleInheritance&#xA;' Author: Sara Henriksen&#xA;' Date: 14.07.16 &#xA;' Purpose:  sub procedure to check if a given class has multiple inheritance &#xA;' 			Implementation of /krav/enkelArv&#xA;' 			&#xA;' @param[in]: currentElement (EA.Element). The &quot;class&quot; to check &#xA; &#xA;sub findMultipleInheritance(currentElement) &#xA; &#xA;	loopCounterMultipleInheritance = loopCounterMultipleInheritance + 1 &#xA; 	dim connectors as EA.Collection  &#xA;  	set connectors = currentElement.Connectors  &#xA;  					  &#xA;  	'iterate the connectors  &#xA;  					 &#xA;  	dim connectorsCounter  &#xA; 	dim numberOfSuperClasses  &#xA; 	numberOfSuperClasses = 0  &#xA; 	dim theTargetGeneralization as EA.Connector &#xA; 	set theTargetGeneralization = nothing &#xA; 					 &#xA;	for connectorsCounter = 0 to connectors.Count - 1  &#xA;		dim currentConnector as EA.Connector  &#xA;		set currentConnector = connectors.GetAt( connectorsCounter )  &#xA; 						 &#xA; 						 &#xA;		'check if the connector type is &quot;Generalization&quot; and if so &#xA;		'get the element on the source end of the connector   &#xA;		if currentConnector.Type = &quot;Generalization&quot;  then &#xA;			if currentConnector.ClientID = currentElement.ElementID then  &#xA; 					 &#xA;				'count number of classes with a generalization connector on the source side  &#xA;				numberOfSuperClasses = numberOfSuperClasses + 1  &#xA;				set theTargetGeneralization = currentConnector  &#xA;			end if  &#xA;		end if &#xA;&#xA;		'if theres more than one generalization connecter on the source side the class has multiple inheritance &#xA;		if numberOfSuperClasses &gt; 1 then &#xA;			Session.Output(&quot;Error: Class [«&quot;&amp;startClass.Stereotype&amp;&quot;» &quot;&amp;startClass.Name&amp; &quot;] has multiple inheritance. [/krav/enkelarv]&quot;) &#xA;			globalErrorCounter = globalErrorCounter + 1 &#xA;			exit for  &#xA;		end if  &#xA;	next &#xA; 					 &#xA;	' if there is just one generalization connector on the source side, start checking genralization connectors for the superclasses  &#xA;	' stop if number of loops exceeds 20&#xA;	if numberOfSuperClasses = 1 and not theTargetGeneralization is nothing and loopCounterMultipleInheritance &lt; 21 then &#xA; 				&#xA;		dim superClassID  &#xA;		dim superClass as EA.Element &#xA;		'the elementID of the element at the target end &#xA;		superClassID =  theTargetGeneralization.SupplierID  &#xA;		set superClass = Repository.GetElementByID(superClassID) &#xA;&#xA;		'Check level of superClass &#xA;		call findMultipleInheritance (superClass) &#xA;		elseif loopCounterMultipleInheritance = 21 then &#xA;			Session.Output(&quot;Warning: Found more than 20 inheritance levels for class: [&quot; &amp;startClass.Name&amp; &quot;] while testing [/krav/enkelarv]. Please check for possible circle inheritance&quot;)&#xA;			globalWarningCounter = globalWarningCounter + 1 &#xA;	end if  &#xA; end sub &#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;'------------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Script Name: checkTVLanguageAndDesignation&#xA;' Author: Sara Henriksen&#xA;' Date: 26.07.16&#xA;' Purpose: Check if the ApplicationSchema-package got a tag named &quot;language&quot; and  check if the value is empty or not. &#xA;' And if there is a designation tag, checks that it has correct structure: &quot;{name}&quot;@{language}  &#xA;' /krav/flersprålighet/pakke	&#xA;' sub procedure to check if the package has the provided tags with a value with correct structure&#xA;' @param[in]: theElement (Package Class) and taggedValueName (String)&#xA;&#xA;sub checkTVLanguageAndDesignation(theElement, taggedValueName)&#xA;&#xA;	if taggedValueName = &quot;language&quot; then &#xA; 		if UCase(theElement.Stereotype) = UCase(&quot;applicationSchema&quot;) then&#xA;		&#xA;			dim packageTaggedValues as EA.Collection &#xA; 			set packageTaggedValues = theElement.TaggedValues &#xA;&#xA; 			dim taggedValueLanguageMissing &#xA; 			taggedValueLanguageMissing = true &#xA;			'iterate trough the tagged values &#xA; 			dim packageTaggedValuesCounter &#xA; 			for packageTaggedValuesCounter = 0 to packageTaggedValues.Count - 1 &#xA; 				dim currentTaggedValue as EA.TaggedValue &#xA; 				set currentTaggedValue = packageTaggedValues.GetAt(packageTaggedValuesCounter) &#xA;				&#xA;				'check if the provided tagged value exist&#xA;				if (currentTaggedValue.Name = &quot;language&quot;) and not (currentTaggedValue.Value= &quot;&quot;) then &#xA;					'check if the value is no or en, if not, retrun a warning &#xA;					if not mid(StrReverse(currentTaggedValue.Value),1,2) = &quot;ne&quot; and not mid(StrReverse(currentTaggedValue.Value),1,2) = &quot;on&quot; then	&#xA;						if globalLogLevelIsWarning then&#xA;							Session.Output(&quot;Warning: Package [«&quot;&amp;theElement.Stereotype&amp;&quot;» &quot; &amp;theElement.Name&amp;&quot;] \ tag [&quot;&amp;currentTaggedvalue.Name&amp; &quot;] has a value which is not &lt;no&gt; or &lt;en&gt;. [/krav/flerspråklighet/pakke][/krav/taggedValueSpråk]&quot;)&#xA;							globalWarningCounter = globalWarningCounter + 1 &#xA;						end if&#xA;					end if&#xA;					taggedValueLanguageMissing = false &#xA;					exit for &#xA;				end if   &#xA;				if currentTaggedValue.Name = &quot;language&quot; and currentTaggedValue.Value= &quot;&quot; then &#xA;					Session.Output(&quot;Error: Package [«&quot;&amp;theElement.Stereotype&amp;&quot;» &quot; &amp;theElement.Name&amp;&quot;] \ tag [&quot;&amp; currentTaggedValue.Name &amp;&quot;] lacks a value. [/krav/flerspråklighet/pakke][/krav/taggedValueSpråk]&quot;) &#xA;					globalErrorCounter = globalErrorCounter + 1 &#xA;					taggedValueLanguageMissing = false &#xA;					exit for &#xA;				end if &#xA; 			next &#xA;			if taggedValueLanguageMissing then &#xA;				Session.Output(&quot;Error: Package [«&quot;&amp;theElement.Stereotype&amp;&quot;» &quot; &amp;theElement.Name&amp;&quot;] lacks a [language] tag. [/krav/flerspråklighet/pakke][/krav/taggedValueSpråk]&quot;) &#xA;				globalErrorCounter = globalErrorCounter + 1 &#xA;			end if &#xA;		end if &#xA;	end if &#xA;&#xA;	if taggedValueName = &quot;designation&quot; then&#xA;&#xA;		if not theElement is nothing and Len(taggedValueName) &gt; 0 then&#xA;		&#xA;			'check if the element has a tagged value with the provided name&#xA;			dim currentExistingTaggedValue1 AS EA.TaggedValue &#xA;			dim valueExists&#xA;			dim enDesignation&#xA;			dim checkQuoteMark&#xA;			dim checkAtMark&#xA;			dim taggedValuesCounter1&#xA;			valueExists=false&#xA;			enDesignation = false&#xA;			for taggedValuesCounter1 = 0 to theElement.TaggedValues.Count - 1&#xA;				set currentExistingTaggedValue1 = theElement.TaggedValues.GetAt(taggedValuesCounter1)&#xA;&#xA;				'check if the tagged value exists, and checks if the value starts with &quot; and ends with &quot;@{language}, if not, return an error. &#xA;				if currentExistingTaggedValue1.Name = taggedValueName then&#xA;					valueExists=true&#xA;					checkQuoteMark=false&#xA;					checkAtMark=false&#xA;					&#xA;					if not len(currentExistingTaggedValue1.Value) = 0 then &#xA;&#xA;						if (InStr(currentExistingTaggedValue1.Value, &quot;@en&quot;)&lt;&gt;0) then &#xA;							enDesignation=true&#xA;						end if&#xA;						&#xA;						if (mid(currentExistingTaggedValue1.Value, 1, 1) = &quot;&quot;&quot;&quot;) then &#xA;							checkQuoteMark=true&#xA;						end if&#xA;						if (InStr(currentExistingTaggedValue1.value, &quot;&quot;&quot;@&quot;)&lt;&gt;0) then &#xA;							checkAtMark=true&#xA;						end if&#xA;						&#xA;						if not (checkAtMark and checkQuoteMark) then&#xA;							globalErrorCounter = globalErrorCounter + 1 &#xA;						end if &#xA;					&#xA;						'Check if the value contains  illegal quotation marks, gives an Warning-message  &#xA;						dim startContent, endContent, designationContent&#xA;	&#xA;						startContent = InStr( currentExistingTaggedValue1.Value, &quot;&quot;&quot;&quot; ) 			&#xA;						endContent = len(currentExistingTaggedValue1.Value)- InStr( StrReverse(currentExistingTaggedValue1.Value), &quot;&quot;&quot;&quot; ) -1&#xA;						if endContent&lt;0 then endContent=0&#xA;						designationContent = Mid(currentExistingTaggedValue1.Value,startContent+1,endContent)				&#xA;&#xA;						if InStr(designationContent, &quot;&quot;&quot;&quot;) then&#xA;							if globalLogLevelIsWarning then&#xA;								Session.Output(&quot;Warning: Package [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot; &amp;theElement.Name&amp;&quot;] \ tag [designation] has a value [&quot;&amp;currentExistingTaggedValue1.Value&amp;&quot;] that contains illegal use of quotation marks.&quot;)&#xA;								globalWarningCounter = globalWarningCounter + 1 &#xA;							end if	&#xA;						end if&#xA;					else&#xA;						Session.Output(&quot;Error: Package [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot; &amp;theElement.Name&amp; &quot;] \ tag [designation] has no value [/krav/taggedValueSpråk]&quot;) &#xA;						globalErrorCounter = globalErrorCounter + 1&#xA;					end if&#xA;				end if 						&#xA;			next&#xA;			if UCase(theElement.Stereotype) = UCase(&quot;applicationSchema&quot;) then&#xA;				if not valueExists then&#xA;					Session.Output(&quot;Error: Package [«&quot;&amp;theElement.Stereotype&amp;&quot;» &quot; &amp;theElement.Name&amp;&quot;] does not have a designation tag [/krav/taggedValueSpråk]&quot;)&#xA;					globalErrorCounter = globalErrorCounter + 1&#xA;				else&#xA;					if not enDesignation then&#xA;						Session.Output(&quot;Error: Package [«&quot;&amp;theElement.Stereotype&amp;&quot;» &quot; &amp;theElement.Name&amp;&quot;] \ tag [designation] lacks a value for English. Expected value &quot;&quot;{English designation}&quot;&quot;@en [/krav/taggedValueSpråk]&quot;)&#xA;						globalErrorCounter = globalErrorCounter + 1&#xA;					end if&#xA;				end if&#xA;			end if&#xA;		end if &#xA;	end if&#xA;end sub &#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;'------------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Script Name: structurOfTVforElement&#xA;' Author: Sara Henriksen&#xA;' Date: 26.07.16	&#xA;' Purpose: Check that the value of a designation/description/definition tag got the structure “{value}”@{landcode}. &#xA;' Implemented for objecttypes, attributes, roles and operations.&#xA;' Two subs, where structurOfTVforElement calls structureOfTVConnectorEnd if the parameter is a connector&#xA;' krav/flerspråklighet/element &#xA;' sub procedure to find the provided tags for a connector, and if they exist, check the structure of the value.   &#xA;' @param[in]: theConnectorEnd (EA.Connector), taggedValueName (string) theConnectorEnd is potencially having tags: description, designation, definition, &#xA;' with a value with wrong structure. &#xA;sub structureOfTVConnectorEnd(theConnectorEnd,  taggedValueName)&#xA;&#xA;	if not theConnectorEnd is nothing and Len(taggedValueName) &gt; 0 then&#xA;	&#xA;		'check if the element has a tagged value with the provided name&#xA;		dim currentExistingTaggedValue as EA.RoleTag &#xA;		dim taggedValuesCounter&#xA;&#xA;		for taggedValuesCounter = 0 to theConnectorEnd.TaggedValues.Count - 1&#xA;			set currentExistingTaggedValue = theConnectorEnd.TaggedValues.GetAt(taggedValuesCounter)&#xA;&#xA;			'if the tagged values exist, check the structure of the value &#xA;			if currentExistingTaggedValue.Tag = taggedValueName then&#xA;				'check if the structure of the tag is: &quot;{value}&quot;@{languagecode}&#xA;				if not (mid(StrReverse(currentExistingTaggedValue.Value), 1,4)) = &quot;ne@&quot;&quot;&quot;  and not (mid(StrReverse(currentExistingTaggedValue.Value), 1,4)) = &quot;on@&quot;&quot;&quot; or not (mid((currentExistingTaggedValue.Value),1,1)) = &quot;&quot;&quot;&quot; then&#xA;					Session.Output(&quot;Error: Role [&quot; &amp;theConnectorEnd.Role&amp; &quot;] \ tag [&quot; &amp;currentExistingTaggedValue.Tag&amp; &quot;] has a value [&quot; &amp;currentExistingTaggedValue.Value&amp; &quot;] with wrong structure. Expected structure: &quot;&quot;{Name}&quot;&quot;@{language}. [/krav/flerspråklighet/element]&quot;)&#xA;					globalErrorCounter = globalErrorCounter + 1 &#xA;				end if &#xA;			end if &#xA;		next&#xA;	end if &#xA;end sub &#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;'------------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;'sub procedure to find the provided tags and if they exist, check the structure of the value.   &#xA;'@param[in]: theElement (EA.ObjectType), taggedValueName (string) The object to check against krav/flerspråklighet/pakke,  &#xA;'supposed to be one of the following types: EA.Element, EA.Attribute, EA.Method, EA.Connector &#xA;sub structurOfTVforElement (theElement, taggedValueName)&#xA;&#xA;	if not theElement is nothing and Len(taggedValueName) &gt; 0 and not theElement.ObjectType = otConnectorEnd   then&#xA;&#xA;		'check if the element has a tagged value with the provided name&#xA;		dim currentExistingTaggedValue AS EA.TaggedValue &#xA;		dim taggedValuesCounter&#xA;&#xA;		for taggedValuesCounter = 0 to theElement.TaggedValues.Count - 1&#xA;			set currentExistingTaggedValue = theElement.TaggedValues.GetAt(taggedValuesCounter)&#xA;&#xA;			if currentExistingTaggedValue.Name = taggedValueName then&#xA;				'check the structure of the tag: &quot;{value}&quot;@{languagecode}&#xA;				if not (mid(StrReverse(currentExistingTaggedValue.Value), 1,4)) = &quot;ne@&quot;&quot;&quot;  and not (mid(StrReverse(currentExistingTaggedValue.Value), 1,4)) = &quot;on@&quot;&quot;&quot; or not (mid((currentExistingTaggedValue.Value),1,1)) = &quot;&quot;&quot;&quot; then&#xA;					Dim currentElement as EA.Element&#xA;					Dim currentAttribute as EA.Attribute&#xA;					Dim currentOperation as EA.Method&#xA;					&#xA;					Select Case theElement.ObjectType &#xA;						'case element&#xA;						Case otElement &#xA;							set currentElement = theElement &#xA;						&#xA;							Session.Output(&quot;Error: Class [«&quot;&amp;theElement.Stereotype&amp;&quot;» &quot; &amp;theElement.Name&amp; &quot;] \ tag [&quot; &amp;currentExistingTaggedValue.Name&amp; &quot;] has a value [&quot; &amp;currentExistingTaggedValue.Value&amp; &quot;] with wrong structure. Expected structure: &quot;&quot;{Name}&quot;&quot;@{language}. [/krav/flerspråklighet/element]&quot;)&#xA;							globalErrorCounter = globalErrorCounter + 1 &#xA;						&#xA;						'case attribute&#xA;						Case otAttribute&#xA;							set currentAttribute = theElement&#xA;						&#xA;							'get the element (class, enumeration, data Type) the attribute belongs to&#xA;							dim parentElementOfAttribute as EA.Element&#xA;							set parentElementOfAttribute = Repository.GetElementByID(currentAttribute.ParentID)&#xA;						&#xA;							Session.Output(&quot;Error: Class [«&quot;&amp; parentElementOfAttribute.Stereotype &amp;&quot;» &quot;&amp; parentElementOfAttribute.Name &amp;&quot;\ attribute [&quot; &amp;theElement.Name&amp; &quot;] \ tag [&quot; &amp;currentExistingTaggedValue.Name&amp; &quot;] has a value [&quot; &amp;currentExistingTaggedValue.Value&amp; &quot;] with wrong structure. Expected structure: &quot;&quot;{Name}&quot;&quot;@{language}. [/krav/flerspråklighet/element]&quot;)&#xA;							globalErrorCounter = globalErrorCounter + 1 &#xA;						&#xA;						'case operation&#xA;						Case otMethod&#xA;							set currentOperation = theElement&#xA;							&#xA;							'get the element (class, enumeration, data Type) the operation belongs to&#xA;							dim parentElementOfOperation as EA.Element&#xA;							set parentElementOfOperation = Repository.GetElementByID(currentOperation.ParentID)&#xA;						&#xA;							Session.Output(&quot;Error: Class [«&quot;&amp; parentElementOfOperation.Stereotype &amp;&quot;» &quot;&amp; parentElementOfOperation.Name &amp;&quot;\ operation [&quot; &amp;theElement.Name&amp; &quot;] \ tag [&quot; &amp;currentExistingTaggedValue.Name&amp; &quot;] has a value: &quot; &amp;currentExistingTaggedValue.Value&amp; &quot; with wrong structure. Expected structure: &quot;&quot;{Name}&quot;&quot;@{language}. [/krav/flerspråklighet/element]&quot;)&#xA;							globalErrorCounter = globalErrorCounter + 1 &#xA;&#xA;					end select 	&#xA;				end if &#xA;			end if &#xA;		next&#xA;	'if the element is a connector then call another sub routine &#xA;	elseif theElement.ObjectType = otConnectorEnd then&#xA;		Call structureOfTVConnectorEnd(theElement, taggedValueName)&#xA;	end if &#xA;end sub&#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;'------------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Script Name: checkValueOfTVVersion&#xA;' Author: Sara Henriksen&#xA;' Date: 25.07.16 &#xA;' Purpose: To check if the value of the version-tag (tagged values) for an ApplicationSchema-package is empty or not. &#xA;' req/uml/packaging&#xA;' sub procedure to check if the tagged value with the provided name exist in the ApplicationSchema, and if the value is emty it returns an Error-message. &#xA;' @param[in]: theElement (Element Class) and TaggedValueName (String) &#xA;sub checkValueOfTVVersion(theElement, taggedValueName)&#xA;&#xA;	if UCase(theElement.stereotype) = UCase(&quot;applicationSchema&quot;) then&#xA;&#xA;		if not theElement is nothing and Len(taggedValueName) &gt; 0 then&#xA;&#xA;			'check if the element has a tagged value with the provided name&#xA;			dim taggedValueVersionMissing&#xA;			taggedValueVersionMissing = true&#xA;			dim currentExistingTaggedValue AS EA.TaggedValue &#xA;			dim taggedValuesCounter&#xA;			for taggedValuesCounter = 0 to theElement.TaggedValues.Count - 1&#xA;				set currentExistingTaggedValue = theElement.TaggedValues.GetAt(taggedValuesCounter)&#xA;			&#xA;				'check if the taggedvalue exists, and if so, checks if the value is empty or not. An empty value will give an error-message. &#xA;				if currentExistingTaggedValue.Name = taggedValueName then&#xA;					'remove spaces before and after a string, if the value only contains blanks  the value is empty&#xA;					currentExistingTaggedValue.Value = Trim(currentExistingTaggedValue.Value)&#xA;					if len (currentExistingTaggedValue.Value) = 0 then &#xA;						Session.Output(&quot;Error: Package [«&quot;&amp;theElement.Stereotype&amp;&quot;» &quot; &amp;theElement.Name&amp;&quot;] has an empty version-tag. [req/uml/packaging]&quot;)&#xA;						globalErrorCounter = globalErrorCounter + 1 &#xA;						taggedValueVersionMissing = false &#xA;					else&#xA;						taggedValueVersionMissing = false &#xA;						'Session.Output(&quot;[&quot; &amp;theElement.Name&amp; &quot;] has version tag:  &quot; &amp;currentExistingTaggedValue.Value)&#xA;					end if &#xA;				end if&#xA;			next&#xA;			'if tagged value version lacks for the package, return an error &#xA;			if taggedValueVersionMissing then&#xA;				Session.Output (&quot;Error: Package [«&quot;&amp;theElement.Stereotype&amp;&quot;» &quot; &amp;theElement.Name&amp;&quot;] lacks a [version] tag. [req/uml/packaging]&quot;)&#xA;				globalErrorCounter = globalErrorCounter + 1 &#xA;			end if&#xA;		end if &#xA;	end if&#xA;end sub &#xA;'-------------------------------------------------------------END-------------------------------------------------------------------------------------------- &#xA; &#xA;&#xA;'------------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Script Name: checkConstraint&#xA;' Author: Sara Henriksen&#xA;' Date: 26.08.16&#xA;' Purpose: to check if a constraint lacks name or definition. &#xA;' req/uml/constraint &amp; krav/definisjoner&#xA;' sub procedure to check the current element/attribute/connector/package for constraints without name or definition&#xA;' not sure if it is possible in EA that constraints without names can exist, checking it anyways&#xA;' @param[in]: currentConstraint (EA.Constraint) theElement (EA.ObjectType) The object to check against req/uml/constraint,  &#xA;' supposed to be one of the following types: EA.Element, EA.Attribute, EA.Connector, EA.package&#xA;&#xA;sub checkConstraint(currentConstraint, theElement)&#xA;	&#xA;	dim currentConnector as EA.Connector&#xA;	dim currentElement as EA.Element&#xA;	dim currentAttribute as EA.Attribute&#xA;	dim currentPackage as EA.Package&#xA;	&#xA;	Select Case theElement.ObjectType&#xA;&#xA;		'if the object is an element&#xA;		Case otElement &#xA;		set currentElement = theElement &#xA;		&#xA;		'if the current constraint lacks definition, then return an error&#xA;		if currentConstraint.Notes= &quot;&quot; then &#xA;			Session.Output(&quot;Error: Class [«&quot;&amp;theElement.Stereotype&amp;&quot;» &quot;&amp;theElement.Name&amp;&quot;] \ constraint [&quot; &amp;currentConstraint.Name&amp;&quot;] lacks definition. [/req/uml/constraint] &amp; [krav/definisjoner]&quot;)&#xA;			globalErrorCounter = globalErrorCounter + 1 &#xA;		end if &#xA;		&#xA;		'if the current constraint lacks a name, then return an error &#xA;		if currentConstraint.Name = &quot;&quot; then&#xA;			Session.Output(&quot;Error: Class [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot;&amp;currentElement.Name&amp; &quot;] has a constraint without a name. [/req/uml/constraint]&quot;)&#xA;			globalErrorCounter = globalErrorCounter + 1 &#xA;		end if &#xA;		&#xA;		'if the object is an attribute &#xA;		Case otAttribute&#xA;		set currentAttribute = theElement &#xA;		&#xA;		'if the current constraint lacks definition, then return an error&#xA;		dim parentElementID&#xA;		parentElementID = currentAttribute.ParentID&#xA;		dim parentElementOfAttribute AS EA.Element&#xA;		set parentElementOfAttribute = Repository.GetElementByID(parentElementID)&#xA;		if currentConstraint.Notes= &quot;&quot; then &#xA;			Session.Output(&quot;Error: Class [&quot;&amp;parentElementOfAttribute.Name&amp;&quot;] \ attribute [&quot;&amp;theElement.Name&amp;&quot;] \ constraint [&quot; &amp;currentConstraint.Name&amp;&quot;] lacks definition. [/req/uml/constraint] &amp; [krav/definisjoner]&quot;)&#xA;			globalErrorCounter = globalErrorCounter + 1 &#xA;		end if &#xA;		&#xA;		'if the current constraint lacks a name, then return an error 	&#xA;		if currentConstraint.Name = &quot;&quot; then&#xA;			Session.Output(&quot;Error: Attribute [&quot;&amp;theElement.Name&amp; &quot;] has a constraint without a name. [/req/uml/constraint]&quot;)&#xA;			globalErrorCounter = globalErrorCounter + 1 &#xA;		end if &#xA;		&#xA;		Case otPackage&#xA;		set currentPackage = theElement&#xA;		&#xA;		'if the current constraint lacks definition, then return an error message&#xA;		if currentConstraint.Notes= &quot;&quot; then &#xA;			Session.Output(&quot;Error: Package [«&quot;&amp;theElement.Element.Stereotype&amp;&quot;» &quot;&amp;theElement.Name&amp;&quot;] \ constraint [&quot; &amp;currentConstraint.Name&amp;&quot;] lacks definition. [/req/uml/constraint] &amp; [krav/definisjoner]&quot;)&#xA;			globalErrorCounter = globalErrorCounter + 1 &#xA;		end if &#xA;		&#xA;		'if the current constraint lacks a name, then return an error meessage		&#xA;		if currentConstraint.Name = &quot;&quot; then&#xA;			Session.Output(&quot;Error: Package [«&quot; &amp;theElement.Element.Stereotype&amp;&quot;» &quot; &amp;currentElement.Name&amp; &quot;] has a constraint without a name. [/req/uml/constraint]&quot;)&#xA;			globalErrorCounter = globalErrorCounter + 1 &#xA;		end if &#xA;			&#xA;		Case otConnector&#xA;		set currentConnector = theElement&#xA;		&#xA;		'if the current constraint lacks definition, then return an error message&#xA;		if currentConstraint.Notes= &quot;&quot; then &#xA;		&#xA;			dim sourceElementID&#xA;			sourceElementID = currentConnector.ClientID&#xA;			dim sourceElementOfConnector AS EA.Element&#xA;			set sourceElementOfConnector = Repository.GetElementByID(sourceElementID)&#xA;			&#xA;			dim targetElementID&#xA;			targetElementID = currentConnector.SupplierID&#xA;			dim targetElementOfConnector AS EA.Element&#xA;			set targetElementOfConnector = Repository.GetElementByID(targetElementID)&#xA;		&#xA;			Session.Output(&quot;Error: Constraint [&quot; &amp;currentConstraint.Name&amp;&quot;] owned by connector [ &quot;&amp;theElement.Name&amp;&quot;] between class [&quot;&amp;sourceElementOfConnector.Name&amp;&quot;] and class [&quot;&amp;targetElementOfConnector.Name&amp;&quot;] lacks definition. [/req/uml/constraint] &amp; [krav/definisjoner]&quot;)&#xA;			globalErrorCounter = globalErrorCounter + 1 &#xA;		end if &#xA;		&#xA;		'if the current constraint lacks a name, then return an error message		&#xA;		if currentConstraint.Name = &quot;&quot; then&#xA;			Session.Output(&quot;Error: Connector [&quot; &amp;theElement.Name&amp; &quot;] has a constraint without a name. [/req/uml/constraint]&quot;)&#xA;			globalErrorCounter = globalErrorCounter + 1 &#xA;		&#xA;		end if&#xA;	end select&#xA;end sub&#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA; &#xA; &#xA;'------------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Script Name: ValidValueSOSI_modellstatus &#xA;' Author: Sara Henriksen&#xA;' Date: 25.07.16&#xA;' Purpose: Check if the ApplicationSchema-package got a tagged value named &quot;SOSI_modellstatus&quot; and checks if it is a valid value &#xA;' /krav/SOSI-modellregister/applikasjonsskjema/status&#xA;' sub procedure to check if the tagged value with the provided name exist, and checks if the value is valid or not &#xA;' (valid values: utkast, gyldig, utkastOgSkjult, foreslått, erstattet, tilbaketrukket og ugyldig). &#xA;'@param[in]: theElement (Package Class) and TaggedValueName (String) &#xA;&#xA;sub ValidValueSOSI_modellstatus(theElement, taggedValueName)&#xA;	&#xA;	if UCase(theElement.Stereotype) = UCase(&quot;applicationSchema&quot;) then&#xA;&#xA;		if not theElement is nothing and Len(taggedValueName) &gt; 0 then&#xA;		&#xA;			'check if the element has a tagged value with the provided name&#xA;			dim taggedValueSOSIModellstatusMissing &#xA;			taggedValueSOSIModellstatusMissing = true &#xA;			dim currentExistingTaggedValue AS EA.TaggedValue &#xA;			dim taggedValuesCounter&#xA;			&#xA;			for taggedValuesCounter = 0 to theElement.TaggedValues.Count - 1&#xA;				set currentExistingTaggedValue = theElement.TaggedValues.GetAt(taggedValuesCounter)&#xA;			&#xA;				if currentExistingTaggedValue.Name = taggedValueName then&#xA;					'check if the value of the tag is one of the approved values. &#xA;					if currentExistingTaggedValue.Value = &quot;utkast&quot; or currentExistingTaggedValue.Value = &quot;gyldig&quot; or currentExistingTaggedValue.Value = &quot;utkastOgSkjult&quot; or currentExistingTaggedValue.Value = &quot;foreslått&quot; or currentExistingTaggedValue.Value = &quot;erstattet&quot; or currentExistingTaggedValue.Value = &quot;tilbaketrukket&quot; or currentExistingTaggedValue.Value = &quot;ugyldig&quot; then &#xA;&#xA;						taggedValueSOSIModellstatusMissing = false &#xA;					else&#xA;						Session.Output(&quot;Error: Package [«&quot;&amp;theElement.Stereotype&amp;&quot;» &quot;&amp;theElement.Name&amp; &quot;] \ tag [SOSI_modellstatus] has a value [&quot; &amp;currentExistingTaggedValue.Value&amp; &quot;]. The value is not approved. [/krav/SOSI-modellregister/applikasjonsskjema/status]&quot;)&#xA;						globalErrorCounter = globalErrorCounter + 1 &#xA;						taggedValueSOSIModellstatusMissing = false &#xA;					end if &#xA;				end if&#xA;			next&#xA;&#xA;			'if the tag doesen't exist, return an error-message &#xA;			if taggedValueSOSIModellstatusMissing then&#xA;				Session.Output(&quot;Error: Package [«&quot;&amp;theElement.Stereotype&amp;&quot;» &quot; &amp;theElement.Name&amp; &quot;] lacks a [SOSI_modellstatus] tag. [krav/SOSI-modellregister/applikansjonsskjema/status]&quot;)&#xA;				globalErrorCounter = globalErrorCounter + 1 &#xA;			end if &#xA;		end if&#xA;	end if &#xA;end sub &#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;'------------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Script Name: checkNumericinitialValues&#xA;' Author: Sara Henriksen&#xA;' Date: 27.07.16&#xA;' Purpose: checks every initial values in  codeLists and enumerations for a package. Returns a warning for each attribute with intitial value that is numeric &#xA;' /anbefaling/1&#xA;'sub procedure to check if the initial values of the attributes in a CodeList/enumeration are numeric or not. &#xA;'@param[in]: theElement (EA.element) The element containing  attributes with potentially numeric inital values &#xA;sub checkNumericinitialValues(theElement)&#xA;&#xA;	dim attr as EA.Attribute&#xA;	dim numberOfNumericDefault&#xA;&#xA;	'navigate through all attributes in the codeLists/enumeration &#xA;	for each attr in theElement.Attributes &#xA;		'check if the initial values are numeric &#xA;		if IsNumeric(attr.Default)   then&#xA;			if globalLogLevelIsWarning then	&#xA;				Session.Output(&quot;Warning: Class [«&quot;&amp;theElement.Stereotype&amp;&quot;» &quot;&amp;theElement.Name&amp;&quot;] \ attribute [&quot; &amp;attr.Name&amp; &quot;] has numeric initial value [&quot; &amp;attr.Default&amp; &quot;] that is probably meaningless. Recommended to use script &lt;flyttInitialverdiPåKodelistekoderTilSOSITag&gt;. [/anbefaling/1]&quot;)		&#xA;				globalWarningCounter = globalWarningCounter + 1 &#xA;			end if&#xA;		end if &#xA;	next&#xA;end sub&#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;'------------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Script Name: checkStereotypes&#xA;' Author: Sara Henriksen&#xA;' Date: 29.08.16 &#xA;'Purpose: check that the stereotype for packages and elements got the right use of lower- and uppercase, if not, return an error. Stereotypes to be cheked:&#xA;' CodeList, dataType, enumeration, interface, Leaf, Union, FeatureType, ApplicationSchema (case sensitiv)&#xA;' /anbefaling/styleGuide &#xA;'sub procedure to check if the stereotype for a given package or element&#xA;'@param[in]: theElement (EA.ObjectType) The object to check against /anbefaling/styleguide &#xA;'supposed to be one of the following types: EA.Element, EA.Package  &#xA;&#xA;sub checkStereotypes(theElement)&#xA;	&#xA;	Dim currentElement as EA.Element&#xA;	Dim currentPackage as EA.Package&#xA;&#xA;	Select Case theElement.ObjectType&#xA;&#xA;		Case otPackage &#xA;		set currentPackage = theElement &#xA;		&#xA;		if UCase(theElement.Element.Stereotype) = &quot;APPLICATIONSCHEMA&quot; then&#xA;			if  not theElement.Element.Stereotype = &quot;ApplicationSchema&quot;   then &#xA;				if globalLogLevelIsWarning then&#xA;					Session.Output(&quot;Warning: Package [«&quot;&amp;theElement.Element.Stereotype&amp;&quot;» &quot;&amp;theElement.Name&amp;&quot;]  has a stereotype with wrong use of lower-and uppercase. Expected use of case: ApplicationSchema [/anbefaling/styleGuide]&quot;)&#xA;					globalWarningCounter = globalWarningCounter + 1 &#xA;				end if	&#xA;			end if &#xA;		end if &#xA;	&#xA;		if UCase(theElement.Element.Stereotype) = &quot;LEAF&quot; then&#xA;			if  not theElement.Element.Stereotype = &quot;Leaf&quot; then 'and not pack.Element.Stereotype = &quot;Leaf&quot; then&#xA;				if globalLogLevelIsWarning then&#xA;					Session.Output(&quot;Warning: Package [«&quot;&amp;theElement.Element.Stereotype&amp;&quot; »&quot;&amp;theElement.Name&amp;&quot;]  has a stereotype with wrong use of lower-and uppercase. Expected use of case: Leaf [/anbefaling/styleGuide]&quot;)&#xA;					globalWarningCounter = globalWarningCounter + 1 &#xA;				end if	&#xA;			end if &#xA;		end if&#xA;		&#xA;		Case otElement&#xA;		set currentElement = theElement &#xA;		if UCase(theElement.Stereotype) = &quot;CODELIST&quot; then &#xA;			if  not theElement.Stereotype = &quot;CodeList&quot; then &#xA;				if globalLogLevelIsWarning then&#xA;					Session.Output(&quot;Warning: Element [«&quot;&amp;theElement.Stereotype&amp;&quot;» &quot;&amp;theElement.Name&amp;&quot;] has a stereotype with wrong use of lower-and uppercase. Expected use of case: CodeList [/anbefaling/styleGuide]&quot;)&#xA;					globalWarningCounter = globalWarningCounter + 1 &#xA;				end if	&#xA;			end if &#xA;		end if &#xA;		&#xA;		if UCase(theElement.Stereotype) = &quot;DATATYPE&quot; then &#xA;			if  not theElement.Stereotype = &quot;dataType&quot; then &#xA;				if globalLogLevelIsWarning then&#xA;					Session.Output(&quot;Warning: Element [«&quot;&amp;theElement.Stereotype&amp;&quot;» &quot;&amp;theElement.Name&amp;&quot;] has a stereotype with wrong use of lower-and uppercase. Expected use of case: dataType [/anbefaling/styleGuide]&quot;)&#xA;					globalWarningCounter = globalWarningCounter + 1 &#xA;				end if	&#xA;			end if &#xA;		end if &#xA;		&#xA;		if UCase(theElement.Stereotype) = &quot;FEATURETYPE&quot; then &#xA;			if  not theElement.Stereotype = &quot;FeatureType&quot; then &#xA;				if globalLogLevelIsWarning then&#xA;					Session.Output(&quot;Warning: Element [«&quot;&amp;theElement.Stereotype&amp;&quot;» &quot;&amp;theElement.Name&amp;&quot;] has a stereotype with wrong use of lower-and uppercase. Expected use of case: FeatureType [/anbefaling/styleGuide]&quot;)&#xA;					globalWarningCounter = globalWarningCounter + 1 &#xA;				end if	&#xA;			end if &#xA;		end if &#xA;		&#xA;		if UCase(theElement.Stereotype) = &quot;UNION&quot; then &#xA;			if  not theElement.Stereotype = &quot;Union&quot; then &#xA;				if globalLogLevelIsWarning then&#xA;					Session.Output(&quot;Warning: Element [«&quot;&amp;theElement.Stereotype&amp;&quot;» &quot;&amp;theElement.Name&amp;&quot;] has a stereotype with wrong use of lower-and uppercase. Expected use of case: Union [/anbefaling/styleGuide]&quot;)&#xA;					globalWarningCounter = globalWarningCounter + 1 &#xA;				end if	&#xA;			end if &#xA;		end if&#xA;		&#xA;		if UCase(theElement.Stereotype) = &quot;ENUMERATION&quot; then &#xA;			if  not theElement.Stereotype = &quot;enumeration&quot; then &#xA;				if globalLogLevelIsWarning then&#xA;					Session.Output(&quot;Warning: Element [«&quot;&amp;theElement.Stereotype&amp;&quot;» &quot;&amp;theElement.Name&amp;&quot;] has a stereotype with wrong use of lower-and uppercase. Expected use of case: enumeration [/anbefaling/styleGuide]&quot;)&#xA;					globalWarningCounter = globalWarningCounter + 1 &#xA;				end if	&#xA;			end if &#xA;		end if&#xA;		&#xA;		if UCase(theElement.Stereotype) = &quot;INTERFACE&quot; then &#xA;			if  not theElement.Stereotype = &quot;interface&quot; then &#xA;				if globalLogLevelIsWarning then&#xA;					Session.Output(&quot;Warning: Element [«&quot;&amp;theElement.Stereotype&amp;&quot;» &quot;&amp;theElement.Name&amp;&quot;] has a stereotype with wrong use of lower-and uppercase. Expected use of case: interface [/anbefaling/styleGuide]&quot;)&#xA;					globalWarningCounter = globalWarningCounter + 1 &#xA;				end if	&#xA;			end if &#xA;		end if&#xA;	end select &#xA;end sub&#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;'------------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Script Name: CheckPackageForHoveddiagram&#xA;' Author: Sara Henriksen&#xA;' Date: 03.08.16&#xA;' Purpose: Check if an application-schema has less than one diagram named &quot;Hoveddiagram&quot;, if so, returns an error&#xA;' /krav/hoveddiagram/navning&#xA;'sub procedure to check if the given package got one or more diagrams with a name starting with &quot;Hoveddiagram&quot;, if not, returns an error &#xA;'@param[in]: package (EA.package) The package containing diagrams potentially with one or more names without &quot;Hoveddiagram&quot;.&#xA;sub CheckPackageForHoveddiagram(package)&#xA;	&#xA;	dim diagrams as EA.Collection&#xA;	set diagrams = package.Diagrams&#xA;	'check all digrams in the package &#xA;	dim i&#xA;	for i = 0 to diagrams.Count - 1&#xA;		dim currentDiagram as EA.Diagram&#xA;		set currentDiagram = diagrams.GetAt( i )&#xA;		'set foundHoveddiagram true if any diagrams have been found with a name starting with &quot;Hoveddiagram&quot;&#xA;		if Mid((currentDiagram.Name),1,12) = &quot;Hoveddiagram&quot;  then &#xA;			foundHoveddiagram = true &#xA;		end if	&#xA;	next&#xA;end sub&#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;'------------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Script Name: FindHoveddiagramsInAS&#xA;' Author: Sara Henriksen&#xA;' Date: 03.08.16&#xA;' Purpose: to check if the applicationSchema-package has more than one diagram with a name starting with &quot;Hoveddiagram&quot;, if so, returns an error if the &#xA;' name of the Diagram is nothing more than &quot;Hoveddiagram&quot;. Returns one error per ApplicationSchema, with the number of wrong-named diagrams for the package.&#xA;' /krav/hoveddiagram/detaljering/navning &#xA;' sub procedure to check if the given package and its subpackages has more than one diagram with the provided name, if so, return and error if &#xA;' the name of the Diagram is nothing more than &quot;Hoveddiagram&quot;.&#xA;'@param[in]: package (EA.package) The package potentially containing diagrams with the provided name&#xA;&#xA;sub FindHoveddiagramsInAS(package)&#xA;	&#xA;	dim diagrams as EA.Collection&#xA;	set diagrams = package.Diagrams&#xA;&#xA;	'find all digrams in the package &#xA;	dim i&#xA;	for i = 0 to diagrams.Count - 1&#xA;		dim currentDiagram as EA.Diagram&#xA;		set currentDiagram = diagrams.GetAt( i )&#xA;				&#xA;		'if the package got less than one diagram with a name starting with &quot;Hoveddiagram&quot;, then return an error &#xA;		if UCase(Mid((currentDiagram.Name),1,12)) = &quot;HOVEDDIAGRAM&quot; and len(currentDiagram.Name) = 12 then &#xA;			numberOfHoveddiagram = numberOfHoveddiagram + 1 &#xA;		end if	 &#xA;		&#xA;		'count diagrams named 'Hovediagram'&#xA;		if UCase(Mid((currentDiagram.Name),1,12)) = &quot;HOVEDDIAGRAM&quot; and len(currentDiagram.Name) &gt; 12 then &#xA;			numberOfHoveddiagramWithAdditionalInformationInTheName = numberOfHoveddiagramWithAdditionalInformationInTheName + 1 &#xA;		end if	 &#xA;	next&#xA;end sub&#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;'------------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Script Name: CheckOversiktsdiagram&#xA;' Author: Åsmund Tjora (based on FindHoveddiagramsInAS by Sara Henriksen)&#xA;' Date: 11.01.17&#xA;' Purpose: check if the applicationSchema-package has more than one diagram with a name starting with &quot;Hoveddiagram&quot;, if so, check that there also is a&#xA;' diagram starting with &quot;Oversiktsdiagram&quot;&#xA;' /krav/oversiktsdiagram &#xA;'@param[in]: package (EA.package) The package potentially containing diagrams with the provided name&#xA;&#xA;sub CheckOversiktsdiagram(package)&#xA;	&#xA;	dim diagrams as EA.Collection&#xA;	set diagrams = package.Diagrams&#xA;	dim noHoveddiagram&#xA;	dim noOversiktsdiagram&#xA;	&#xA;	noHoveddiagram = 0&#xA;	noOversiktsdiagram = 0&#xA;&#xA;	'find all diagrams in the package &#xA;	dim i&#xA;	for i = 0 to diagrams.Count - 1&#xA;		dim currentDiagram as EA.Diagram&#xA;		set currentDiagram = diagrams.GetAt( i )&#xA;		if UCase(Mid(currentDiagram.Name,1,12)) = &quot;HOVEDDIAGRAM&quot; then &#xA;			noHoveddiagram = noHoveddiagram + 1 &#xA;		end if	 &#xA;		if UCase(Mid(currentDiagram.Name,1,16)) = &quot;OVERSIKTSDIAGRAM&quot; then&#xA;			noOversiktsdiagram = noOversiktsdiagram + 1&#xA;		end if	 &#xA;	next&#xA;	if  ((noHoveddiagram &gt; 1) and (noOversiktsdiagram = 0)) then&#xA;		session.output(&quot;Error: Package [&quot; &amp; package.Name &amp; &quot;] has more than one diagram with names starting with Hoveddiagram, but no diagram with name starting with Oversiktsdiagram [/krav/oversiktsdiagram]&quot;)&#xA;		globalErrorCounter = globalErrorCounter + 1 		&#xA;	end if&#xA;end sub&#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;'------------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Script Name: checkExternalCodelists&#xA;' Author: Sara Henriksen&#xA;' Date: 15.08.16&#xA;' Purpose: check each codeList for 'asDictionary' tag with value 'true', if so, check if tag codeList exist and if not return an error, if the value of the tag is empty also return an error&#xA;' /krav/eksternKodeliste&#xA;' 2 subs, &#xA;'sub procedure to check if given codelist got the provided tag with value &quot;true&quot;, if so, calls another sub procedure&#xA;'@param[in]: theElement (Attribute Class) and TaggedValueName (String)&#xA;&#xA;sub checkExternalCodelists(theElement,  taggedValueName)&#xA;&#xA;	if taggedValueName = &quot;asDictionary&quot; then &#xA;&#xA;		if not theElement is nothing and Len(taggedValueName) &gt; 0 then&#xA;&#xA;			'iterate trough all tagged values&#xA;			dim currentExistingTaggedValue AS EA.TaggedValue &#xA;			dim taggedValuesCounter&#xA;			for taggedValuesCounter = 0 to theElement.TaggedValues.Count - 1&#xA;				set currentExistingTaggedValue = theElement.TaggedValues.GetAt(taggedValuesCounter)&#xA;&#xA;				'check if the tagged value exists &#xA;				if currentExistingTaggedValue.Name = taggedValueName then&#xA;					'check if the value is &quot;true&quot; and if so, calls the subroutine to searching for codeList tags.&#xA;					if currentExistingTaggedValue.Value = &quot;true&quot; then &#xA;&#xA;						Call CheckCodelistTV(theElement, &quot;codeList&quot;)&#xA;					end if &#xA;				end if &#xA;			next&#xA;		end if &#xA;	end if &#xA;end sub&#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;'------------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;'sub procedure to check if the provided tag exist (codeList), and if so, check  if the value is empty or not&#xA;'@param[in]: theElement (Element Class) and TaggedValueName (String)&#xA;&#xA;sub CheckCodelistTV (theElement,  taggedValueNAME)&#xA;&#xA;	'iterate tagged Values &#xA;	dim currentExistingTaggedValue AS EA.TaggedValue &#xA;	dim taggedValueCodeListMissing&#xA;	taggedValueCodeListMissing = true&#xA;	dim taggedValuesCounter&#xA;	&#xA;	for taggedValuesCounter = 0 to theElement.TaggedValues.Count - 1&#xA;		set currentExistingTaggedValue = theElement.TaggedValues.GetAt(taggedValuesCounter)&#xA;		'check if the tagged value exists&#xA;		if currentExistingTaggedValue.Name = taggedValueName then&#xA;			'Session.Output(&quot;følgende kodeliste:  &quot; &amp;theElement.Name)&#xA;			taggedValueCodeListMissing = false&#xA;			&#xA;			'if the codeList-value is empty, return an error &#xA;			if currentExistingTaggedValue.Value = &quot;&quot; then &#xA;				Session.Output(&quot;Error: Class [«&quot;&amp;theElement.Stereotype&amp;&quot;» &quot;&amp;theElement.Name&amp; &quot;] \ tag [codeList] lacks value. [/krav/eksternKodeliste]&quot;)&#xA;				globalErrorCounter = globalErrorCounter + 1 &#xA;			end if &#xA;		end if &#xA;	next&#xA;	&#xA;	'if the tagged value &quot;codeList&quot; is missing for an element(codelist), return an error&#xA;	if taggedValueCodeListMissing then&#xA;		Session.Output(&quot;Error: Class [«&quot;&amp;theElement.Stereotype&amp;&quot;» &quot;&amp;theElement.Name&amp; &quot;] lacks a [codeList] tag. [/krav/eksternKodeliste]&quot;)&#xA;		globalErrorCounter = globalErrorCounter + 1 &#xA;	end if&#xA;end sub&#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;' -----------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Sub Name: krav6-mnemoniskKodenavn&#xA;' Author: Kent Jonsrud&#xA;' Date: 2016-08-04&#xA;' Purpose: &#xA;    'test if element name is legal NCName&#xA;    '/krav/6 - Navn på koder skal være mnemoniske (forståelige/huskbare), følge navnereglene for egenskapsnavn og være uten skilletegn og spesialtegn&#xA;    'Visuell sjekk om navnene er gode/forståelige - etter beste mnemoniske vurdering&#xA;    'Sjekk at navnet er NCName. &#xA;	'Skilletegn og spesialtegn som må unngås er: blank, komma, !, &quot;&quot;, #, $, %, &amp;, ', (, ), *, +, /, :, ;, &lt;, =, &gt;, ?, @, [, \, ], ^, `, {, |, }, ~&#xA;	'((Tegnkoder under 32 (eksempelvis TAB) er ulovlige.))&#xA;    'Et modellelementnavn kan ikke starte med tall, &quot;&quot;-&quot;&quot; eller &quot;&quot;.&quot;&quot;&quot;&#xA;	'Advarsel (Feil?) hvis kodens navn ikke er lowerCamelCase-NCName. &#xA;&#xA;sub krav6mnemoniskKodenavn(theElement)&#xA;	&#xA;	dim goodNames, lowerCameCase, badName&#xA;	goodNames = true&#xA;	lowerCameCase = true&#xA;	dim attr as EA.Attribute&#xA;	dim numberOfFaults&#xA;	numberOfFaults = 0&#xA;	dim numberOfWarnings&#xA;	numberOfWarnings = 0&#xA;	dim numberInList&#xA;	numberInList = 0&#xA;	&#xA;	'navigate through all attributes in the codeLists/enumeration &#xA;	for each attr in theElement.Attributes&#xA;		'count number of attributes in one list&#xA;		numberInList = numberInList + 1 &#xA;		'check if the name is NCName&#xA;		if NOT IsNCName(attr.Name) then&#xA;			'count number of numeric initial values for one list&#xA;			numberOfFaults = numberOfFaults + 1&#xA;			Session.Output(&quot;Error: Class [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot; &amp;theElement.Name&amp; &quot;] has illegal code name [&quot;&amp;attr.Name&amp;&quot;]. Recommended to use the script &lt;lagLovligeNCNavnPåKodelistekoder&gt;. [/krav/6]&quot;)&#xA;			if goodNames then&#xA;				badName = attr.Name&#xA;			end if&#xA;			goodNames = false &#xA;		end if &#xA;		'check if any of the names are lowerCameCase&#xA;		if NOT (mid(attr.Name,1,1) = LCASE(mid(attr.Name,1,1)) ) then&#xA;			numberOfWarnings = numberOfWarnings + 1&#xA;			if globalLogLevelIsWarning then&#xA;				Session.Output(&quot;Warning: Class [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot; &amp;theElement.Name&amp; &quot;] has code name that is not lowerCamelCase [&quot;&amp;attr.Name&amp;&quot;]. Recommended to use the script &lt;lagLovligeNCNavnPåKodelistekoder&gt;. [/krav/6]&quot;)&#xA;			end if&#xA;			lowerCameCase = false&#xA;		End if&#xA;	next&#xA;	&#xA;	&#xA;	'if one or more names are illegal, return a error.&#xA;	if goodNames = false then &#xA;		'Session.Output(&quot;Error: Illegal code names starts with [&quot;&amp;badName&amp;&quot;] for class: [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot; &amp;theElement.Name&amp; &quot;]. &quot;&amp;numberOfFaults&amp;&quot;/&quot;&amp;numberInList&amp;&quot; of the names are illegal.  Recommended to use the script &lt;lagLovligeNCNavnPåKodelistekoder&gt;   [/krav/6 ]&quot;)&#xA;		globalErrorCounter = globalErrorCounter +  numberOfFaults&#xA;	end if&#xA;	&#xA;	'if one or more names start with uppercase, return a warning.&#xA;	if lowerCameCase = false then &#xA;		if globalLogLevelIsWarning then&#xA;			'Session.Output(&quot;Warning: All code names are not lowerCamelCase for class: [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot; &amp;theElement.Name&amp; &quot;].  Recommended to use the script &lt;lagLovligeNCNavnPåKodelistekoder&gt;  [/krav/6 ]&quot;)&#xA;			globalWarningCounter = globalWarningCounter +  numberOfWarnings&#xA;		end if	&#xA;	end if&#xA;end sub&#xA;&#xA;Function IsNCName(streng)&#xA;    Dim txt, res, tegn, i, u&#xA;    u = true&#xA;	txt = &quot;&quot;&#xA;	For i = 1 To Len(streng)&#xA;        tegn = Mid(streng,i,1)&#xA;	    if tegn = &quot; &quot; or tegn = &quot;,&quot; or tegn = &quot;&quot;&quot;&quot; or tegn = &quot;#&quot; or tegn = &quot;$&quot; or tegn = &quot;%&quot; or tegn = &quot;&amp;&quot; or tegn = &quot;(&quot; or tegn = &quot;)&quot; or tegn = &quot;*&quot; Then&#xA;		    u=false&#xA;		end if &#xA;	&#xA;		if tegn = &quot;+&quot; or tegn = &quot;/&quot; or tegn = &quot;:&quot; or tegn = &quot;;&quot; or tegn = &quot;&lt;&quot; or tegn = &quot;&gt;&quot; or tegn = &quot;?&quot; or tegn = &quot;@&quot; or tegn = &quot;[&quot; or tegn = &quot;\&quot; Then&#xA;		    u=false&#xA;		end if &#xA;		If tegn = &quot;]&quot; or tegn = &quot;^&quot; or tegn = &quot;`&quot; or tegn = &quot;{&quot; or tegn = &quot;|&quot; or tegn = &quot;}&quot; or tegn = &quot;~&quot; or tegn = &quot;'&quot; or tegn = &quot;´&quot; or tegn = &quot;¨&quot; Then&#xA;		    u=false&#xA;		end if &#xA;		if tegn &lt;  &quot; &quot; then&#xA;		    u=false&#xA;		end if&#xA;	next&#xA;	tegn = Mid(streng,1,1)&#xA;	if tegn = &quot;1&quot; or tegn = &quot;2&quot; or tegn = &quot;3&quot; or tegn = &quot;4&quot; or tegn = &quot;5&quot; or tegn = &quot;6&quot; or tegn = &quot;7&quot; or tegn = &quot;8&quot; or tegn = &quot;9&quot; or tegn = &quot;0&quot; or tegn = &quot;-&quot; or tegn = &quot;.&quot; Then&#xA;		u=false&#xA;	end if &#xA;	IsNCName = u&#xA;End Function&#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;' -----------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Sub Name: krav7-kodedefinisjon&#xA;' Author: Kent Jonsrud&#xA;' Date: 2016-08-05&#xA;' Purpose: &#xA; 	' test if element has definition&#xA;	'/krav/7&#xA;  	'Alle koder er konsepter, og skal ha tilstrekkelig definisjon. Det vil si alle unntatt lister over kjente egennavn.&#xA;  	'Visuell sjekk om navnene er egennavn, der dette ikke er tilfellet skal det finnes en definisjon&#xA;  	'Se Krav 3, bør kun gi advarsel fordi vi ikke kan sjekke om det dreier seg om et egetnavn eller ikke&#xA;&#xA;sub krav7kodedefinisjon(theElement)&#xA;	&#xA;	dim goodNames, badName&#xA;	goodNames = true&#xA;	dim attr as EA.Attribute&#xA;	dim numberOfFaults&#xA;	numberOfFaults = 0&#xA;	dim numberInList&#xA;	numberInList = 0&#xA;	&#xA;	'navigate through all attributes in the codeLists/enumeration &#xA;	for each attr in theElement.Attributes&#xA;		'count number of attributes in one list&#xA;		numberInList = numberInList + 1 &#xA;		'check if the code has definition&#xA;		if attr.Notes = &quot;&quot; then&#xA;			numberOfFaults = numberOfFaults + 1&#xA;			if globalLogLevelIsWarning then&#xA;				Session.Output(&quot;Warning: Class [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot; &amp;theElement.Name&amp; &quot;] is missing definition for code [&quot;&amp;attr.Name&amp;&quot;]. [/krav/7]&quot;)&#xA;			end if&#xA;			if goodNames then&#xA;				badName = attr.Name&#xA;			end if&#xA;			goodNames = false &#xA;		end if &#xA;	next&#xA;&#xA;	'if one or more codes lack definition, warning.&#xA;	if goodNames = false then &#xA;		if globalLogLevelIsWarning then&#xA;			'Session.Output(&quot;Warning: Missing definition for code [&quot;&amp;badName&amp;&quot;] in class: [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot; &amp;theElement.Name&amp; &quot;]. &quot;&amp;numberOfFaults&amp;&quot;/&quot;&amp;numberInList&amp;&quot; of the codes lack definition. [/krav/7]&quot;)&#xA;			globalWarningCounter = globalWarningCounter + 1&#xA;		end if	&#xA;	end if&#xA;end sub&#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;' -----------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Sub Name: krav14 - inherit from same stereotype&#xA;' Author: Tore Johnsen&#xA;' Date: 2016-08-22&#xA;' Purpose: Checks that there is no inheritance between classes with unequal stereotypes.&#xA;'		/krav/14&#xA;' @param[in]: currentElement&#xA;&#xA;sub krav14(currentElement)&#xA;&#xA;	dim connectors as EA.Collection&#xA;	set connectors = currentElement.Connectors&#xA;	dim connectorsCounter&#xA;	&#xA;	for connectorsCounter = 0 to connectors.Count - 1&#xA;		dim currentConnector as EA.Connector&#xA;		set currentConnector = connectors.GetAt( connectorsCounter )&#xA;		dim targetElementID&#xA;		targetElementID = currentConnector.SupplierID&#xA;		dim elementOnOppositeSide as EA.Element&#xA;					&#xA;		if currentConnector.Type = &quot;Generalization&quot; then&#xA;			set elementOnOppositeSide = Repository.GetElementByID(targetElementID)&#xA;			&#xA;			if UCase(elementOnOppositeSide.Stereotype) &lt;&gt; UCase(currentElement.Stereotype) then&#xA;				session.output(&quot;Error: Class [&quot; &amp; elementOnOppositeSide.Name &amp; &quot;] has a stereotype that is not the same as the stereotype of [&quot; &amp; currentElement.Name &amp; &quot;]. A class can only inherit from a class with the same stereotype. [/krav/14]&quot;)&#xA;				globalErrorCounter = globalErrorCounter + 1 &#xA;			end if&#xA;		end if&#xA;	next&#xA;end sub&#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;' -----------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Sub Name: krav15-stereotyper&#xA;' Author: Kent Jonsrud&#xA;' Date: 2016-08-05&#xA;' Purpose: &#xA;    '/krav/15&#xA;    'Modeller av geografisk informasjon skal ved behov bruke en av de standardiserte stereotypene, og ikke lage egne alternative stereotyper med samme mening.&#xA;    '(CodeList, dataType, enumeration, interface, Leaf, Union, FeatureType, ApplicationSchema) (Andre stereotyper med andre betydninger kan legges til.)&#xA;    'visuell sjekk at det ikke legges en annen betydning i stereotypene som er nevnt i kravet og  dersom stereotypen ikke er kjent.&#xA;    'Sjekk mot alle stereotyper som er nevnt i standarden og som er knyttet til et applikasjonsskjema.&#xA;    'Advarselsmelding der det er stereotyper som ikke er en del av lista.&#xA;    'NB - ta med&lt;estimated&gt;, beskrevet i ISO 19156 og SOSI Regler for UML modellering (testen skal være case-uavhengig)&#xA;    'høy&#xA;    'ta inn MessageType fra kap 9 i en senere versjon (2.0?)	Advarsel&#xA;&#xA;sub krav15stereotyper(theElement)&#xA;	dim goodNames, badName, badStereotype, roleName&#xA;	goodNames = true&#xA;	dim attr as EA.Attribute&#xA;	dim conn as EA.Collection&#xA;	dim numberOfFaults&#xA;	numberOfFaults = 0&#xA;	dim numberInList&#xA;	numberInList = 0&#xA;	&#xA;	'navigate through all attributes  &#xA;	for each attr in theElement.Attributes&#xA;		numberInList = numberInList + 1 &#xA;		if attr.Stereotype &lt;&gt; &quot;&quot; then&#xA;			numberOfFaults = numberOfFaults + 1&#xA;			if globalLogLevelIsWarning then&#xA;				Session.Output(&quot;Warning: Class [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot; &amp;theElement.Name&amp; &quot;] has unknown stereotype. «&quot; &amp; attr.Stereotype &amp; &quot;» on attribute [&quot;&amp;attr.Name&amp;&quot;]. [/krav/15]&quot;)&#xA;				globalWarningCounter = globalWarningCounter + 1&#xA;			end if	&#xA;			if goodNames then&#xA;				badName = attr.Name&#xA;				badStereotype = attr.Stereotype&#xA;			end if&#xA;			goodNames = false &#xA;		end if &#xA;	next&#xA;	&#xA;	'if one or more codes lack definition, warning.&#xA;	if goodNames = false then &#xA;		if globalLogLevelIsWarning then&#xA;			'Session.Output(&quot;Warning: Unknown attribute stereotypes starting with [«&quot;&amp;badStereotype&amp;&quot;» &quot;&amp;badName&amp;&quot;] in class: [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot; &amp;theElement.Name&amp; &quot;]. &quot;&amp;numberOfFaults&amp;&quot;/&quot;&amp;numberInList&amp;&quot; of the attributes have unknown stereotype. [/krav/15]&quot;)&#xA;			globalWarningCounter = globalWarningCounter + 1&#xA;		end if	&#xA;	end if&#xA;&#xA;	'operations?&#xA;	&#xA;	'Association roles with stereotypes other than «estimated»&#xA;	for each conn in theElement.Connectors&#xA;		roleName = &quot;&quot;&#xA;		badStereotype = &quot;&quot;&#xA;		if theElement.ElementID = conn.ClientID then&#xA;			roleName = conn.SupplierEnd.Role&#xA;			badStereotype = conn.SupplierEnd.Stereotype&#xA;		end if&#xA;		if theElement.ElementID = conn.SupplierID then&#xA;			roleName = conn.ClientEnd.Role&#xA;			badStereotype = conn.ClientEnd.Stereotype&#xA;		end if&#xA;		'(ignoring all association roles without name!)&#xA;		if roleName &lt;&gt; &quot;&quot; then&#xA;			if badStereotype &lt;&gt; &quot;&quot; and LCase(badStereotype) &lt;&gt; &quot;estimated&quot; then&#xA;				if globalLogLevelIsWarning then&#xA;					Session.Output(&quot;Warning: Class [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot; &amp;theElement.Name&amp; &quot;] as unknown stereotype «&quot;&amp;badStereotype&amp;&quot;» on role name [&quot;&amp;roleName&amp;&quot;]. [/krav/15]&quot;)				&#xA;					globalWarningCounter = globalWarningCounter + 1 &#xA;				end if	&#xA;			end if&#xA;		end if&#xA;	next&#xA;	&#xA;	'Associations with stereotype, especially «topo»&#xA;	for each conn in theElement.Connectors&#xA;		if conn.Stereotype &lt;&gt; &quot;&quot; then&#xA;			if LCase(conn.Stereotype) = &quot;topo&quot; then&#xA; 				Session.Output(&quot;Error: Class [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot; &amp;theElement.Name&amp; &quot;] has illegal stereotype «&quot;&amp;conn.Stereotype&amp;&quot;» on association named [&quot;&amp;conn.Name&amp;&quot;]. Recommended to use the script &lt;endreTopoAssosiasjonTilRestriksjon&gt;. [/krav/15]&quot;)				&#xA; 				globalErrorCounter = globalErrorCounter + 1 &#xA;			else&#xA;				if globalLogLevelIsWarning then&#xA;					Session.Output(&quot;Warning: Class [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot; &amp;theElement.Name&amp; &quot;] has unknown stereotype «&quot;&amp;conn.Stereotype&amp;&quot;» on association named [&quot;&amp;conn.Name&amp;&quot;]. [/krav/15]&quot;)				&#xA;					globalWarningCounter = globalWarningCounter + 1 &#xA;				end if	&#xA;			end if&#xA;		end if&#xA;	next&#xA;end sub&#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;' -----------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Sub Name: krav16-unikeNCnavn&#xA;' Author: Kent Jonsrud&#xA;' Date: 2016-08-09&#xA;' Purpose: &#xA;    '/krav/16&#xA;    'Alle navn på modellelementer skal være case-insensitivt unike innenfor sitt navnerom, og ikke inneholde blanke eller andre skilletegn.&#xA;    'Merknad: navnerommet til roller og egenskaper er klassen.&#xA;    'Sjekk at navnene til klasser (classifier: kodelister, enumerations, datatyper, objekttyper) og underpakker(!), er unike innenfor sitt navnerom (valgt pakke)&#xA;    'Navn til roller, egenskaper og operasjoner skal være unike innenfor klassen.&#xA;    'Notat: NCName, unike navn på klasse i underpakker, unike eg-/rolle-/oper-navn (forby polymorfisme på operasjoner?)&#xA; &#xA;sub krav16unikeNCnavn(theElement)&#xA;	&#xA;	dim goodNames, lowerCameCase, badName, roleName&#xA;	goodNames = true&#xA;	lowerCameCase = true&#xA;	dim super as EA.Element&#xA;	dim attr as EA.Attribute&#xA;	dim oper as EA.Collection&#xA;	dim conn as EA.Collection&#xA;	dim numberOfFaults&#xA;	numberOfFaults = 0&#xA;	dim numberInList&#xA;	numberInList = 0&#xA;&#xA;	dim PropertyNames&#xA;	Set PropertyNames = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#xA;	'List of element IDs to check for endless recursion (Åsmund)&#xA;	dim inheritanceElementList&#xA;	set inheritanceElementList = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#xA;	'Association role names&#xA;	for each conn in theElement.Connectors&#xA;		roleName = &quot;&quot;&#xA;		if theElement.ElementID = conn.ClientID then&#xA;			roleName = conn.SupplierEnd.Role&#xA;		end if&#xA;		if theElement.ElementID = conn.SupplierID then&#xA;			roleName = conn.ClientEnd.Role&#xA;		end if&#xA;		'(ignoring all association roles without name!)&#xA;		if roleName &lt;&gt; &quot;&quot; then&#xA;			if PropertyNames.IndexOf(UCase(roleName),0) &lt;&gt; -1 then&#xA;				Session.Output(&quot;Error: Class [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot; &amp;theElement.Name&amp; &quot;] has non-unique role name [&quot;&amp;roleName&amp;&quot;]. [/krav/16]&quot;)				&#xA; 				globalErrorCounter = globalErrorCounter + 1 &#xA;			else&#xA;				PropertyNames.Add UCase(roleName)&#xA;			end if&#xA;			if NOT IsNCName(roleName) then&#xA;				Session.Output(&quot;Error: Class [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot; &amp;theElement.Name&amp; &quot;] has illegal role name, [&quot;&amp;roleName&amp;&quot;] is not a NCName. [/krav/16]&quot;)				&#xA; 				globalErrorCounter = globalErrorCounter + 1 &#xA;			end if&#xA;		end if&#xA;	next&#xA;	&#xA;	'Operation names&#xA;	for each oper in theElement.Methods&#xA;		if PropertyNames.IndexOf(UCase(oper.Name),0) &lt;&gt; -1 then&#xA;			Session.Output(&quot;Error: Class [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot; &amp;theElement.Name&amp; &quot;] has non-unique operation property name [&quot;&amp;oper.Name&amp;&quot;]. [/krav/16]&quot;)				&#xA;			globalErrorCounter = globalErrorCounter + 1 &#xA;		else&#xA;			PropertyNames.Add UCase(oper.Name)&#xA;		end if&#xA;		'check if the name is NCName&#xA;		if NOT IsNCName(oper.Name) then&#xA;				Session.Output(&quot;Error: Class [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot; &amp;theElement.Name&amp; &quot;] has illegal operation name, [&quot;&amp;oper.Name&amp;&quot;] is not a NCName. [/krav/16]&quot;)				&#xA; 				globalErrorCounter = globalErrorCounter + 1 &#xA;		end if &#xA;	next&#xA;	&#xA;	'Constraint names TODO&#xA;	&#xA;	'navigate through all attributes &#xA;	for each attr in theElement.Attributes&#xA;		'count number of attributes in one list&#xA;		numberInList = numberInList + 1 &#xA;		if PropertyNames.IndexOf(UCase(attr.Name),0) &lt;&gt; -1 then&#xA;			Session.Output(&quot;Error: Class [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot; &amp;theElement.Name&amp; &quot;] has non-unique attribute property name [&quot;&amp;attr.Name&amp;&quot;]. [/krav/16]&quot;)				&#xA;			globalErrorCounter = globalErrorCounter + 1 &#xA;		else&#xA;			PropertyNames.Add UCase(attr.Name)&#xA;		end if&#xA;&#xA;		'check if the name is NCName (exception for code names - they have a separate test.)&#xA;		if NOT ((theElement.Type = &quot;Class&quot;) and (UCase(theElement.Stereotype) = &quot;CODELIST&quot;  Or UCase(theElement.Stereotype) = &quot;ENUMERATION&quot;)) then&#xA;			if NOT IsNCName(attr.Name) then&#xA;				'count number of numeric initial values for one list&#xA;				Session.Output(&quot;Error: Class [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot; &amp;theElement.Name&amp; &quot;] has illegal attribute name, [&quot;&amp;attr.Name&amp;&quot;] is not a NCName. [/krav/16]&quot;)				&#xA; 				globalErrorCounter = globalErrorCounter + 1 &#xA;			end if&#xA;		end if &#xA;	next&#xA;&#xA;	'Other attributes and roles inherited from outside package&#xA;	'Traverse and test against inherited names but do not add the inherited names to the list(!)&#xA;	for each conn in theElement.Connectors&#xA;&#xA;		if conn.Type = &quot;Generalization&quot; then&#xA;			if theElement.ElementID = conn.ClientID then&#xA;				set super = Repository.GetElementByID(conn.SupplierID)&#xA;				&#xA;				'Check agains endless recursion (Åsmund)&#xA;				dim hopOutOfEndlessRecursion&#xA;				dim inheritanceElementID&#xA;				hopOutOfEndlessRecursion = 0&#xA;				inheritanceElementList.Add(theElement.ElementID)&#xA;				for each inheritanceElementID in inheritanceElementList&#xA;					if inheritanceElementID = super.ElementID then &#xA;						hopOutOfEndlessRecursion = 1&#xA;						Session.Output(&quot;Error: Class [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot; &amp;theElement.Name&amp; &quot;] is a generalization of itself.&quot;)&#xA;						globalErrorCounter = globalErrorCounter + 1&#xA;					end if&#xA;				next&#xA;				if hopOutOfEndlessRecursion=0 then call krav16unikeNCnavnArvede(super, PropertyNames, inheritanceElementList)&#xA;			end if&#xA;		end if&#xA;	next&#xA;end sub&#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;' -----------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;sub krav16unikeNCnavnArvede(theElement, PropertyNames, inheritanceElementList)&#xA;	dim goodNames, lowerCameCase, badName, roleName&#xA;	goodNames = true&#xA;	lowerCameCase = true&#xA;	dim super as EA.Element&#xA;	dim attr as EA.Attribute&#xA;	dim oper as EA.Collection&#xA;	dim conn as EA.Collection&#xA; 	dim numberOfFaults&#xA;	numberOfFaults = 0&#xA;	dim numberInList&#xA;	numberInList = 0&#xA;&#xA;'	test if supertype name is same as one in the tested package. (supertype may well be outside the tested package.)&#xA;'	if ClassAndPackageNames.IndexOf(UCase(theElement.Name),0) &lt;&gt; -1 then&#xA;'	Session.Output(&quot;Warning: non-unique supertype name [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot;&amp;theElement.Name&amp;&quot;] in package: [&quot;&amp;Repository.GetPackageByID(theElement.PackageID).Name&amp;&quot;].  EA-type:&quot; &amp;theElement.Type&amp; &quot;  [/krav/16 ]&quot;)				&#xA;' 	globalWarningCounter = globalWarningCounter + 1&#xA;'	end if&#xA;&#xA;	'Association role names&#xA;	for each conn in theElement.Connectors&#xA;&#xA;		roleName = &quot;&quot;&#xA;		if theElement.ElementID = conn.ClientID then&#xA;			roleName = conn.SupplierEnd.Role&#xA;		end if&#xA;		if theElement.ElementID = conn.SupplierID then&#xA;			roleName = conn.ClientEnd.Role&#xA;		end if&#xA;		'(ignoring all association roles without name!)&#xA;		if roleName &lt;&gt; &quot;&quot; then&#xA;			if PropertyNames.IndexOf(UCase(roleName),0) &lt;&gt; -1 then&#xA;				if globalLogLevelIsWarning then&#xA;					Session.Output(&quot;Warning: Class [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot; &amp;theElement.Name&amp; &quot;] in package: [&quot;&amp;Repository.GetPackageByID(theElement.PackageID).Name&amp;&quot;] has non-unique inherited role property name [&quot;&amp;roleName&amp;&quot;] implicitly redefined from. [/krav/16]&quot;)				&#xA;					globalWarningCounter = globalWarningCounter + 1&#xA;				end if	&#xA;			end if&#xA;		end if&#xA;	next&#xA;	&#xA;	'Operation names&#xA;	for each oper in theElement.Methods&#xA;		if PropertyNames.IndexOf(UCase(oper.Name),0) &lt;&gt; -1 then&#xA;			if globalLogLevelIsWarning then&#xA;				Session.Output(&quot;Warning: Class [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot; &amp;theElement.Name&amp; &quot;] in package: [&quot;&amp;Repository.GetPackageByID(theElement.PackageID).Name&amp;&quot;] has inherited and implicitly redefined non-unique operation property name [&quot;&amp;oper.Name&amp;&quot;]. [/krav/16]&quot;)				&#xA;				globalWarningCounter = globalWarningCounter + 1&#xA;			end if	&#xA;		end if&#xA;	next&#xA;	&#xA;	'Constraint names TODO&#xA;	&#xA;	'navigate through all attributes &#xA;	for each attr in theElement.Attributes&#xA;		'count number of attributes in one list&#xA;		numberInList = numberInList + 1 &#xA;		if PropertyNames.IndexOf(UCase(attr.Name),0) &lt;&gt; -1 then&#xA;			if globalLogLevelIsWarning then&#xA;				Session.Output(&quot;Warning: Class [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot; &amp;theElement.Name&amp; &quot;] in package: [&quot;&amp;Repository.GetPackageByID(theElement.PackageID).Name&amp;&quot;] has non-unique inherited and implicitly redefined attribute property name[&quot;&amp;attr.Name&amp;&quot;]. [/krav/16]&quot;)				&#xA;				globalWarningCounter = globalWarningCounter + 1&#xA;			end if	&#xA;		end if&#xA;	next&#xA;&#xA;	'Other attributes and roles inherited from outside package&#xA;	'Traverse and test against inherited names but do not add the inherited names to the list&#xA;	for each conn in theElement.Connectors&#xA;		if conn.Type = &quot;Generalization&quot; then&#xA;			if theElement.ElementID = conn.ClientID then&#xA;				set super = Repository.GetElementByID(conn.SupplierID)&#xA;				'Check agains endless recursion (Åsmund)&#xA;				dim hopOutOfEndlessRecursion&#xA;				dim inheritanceElementID&#xA;				hopOutOfEndlessRecursion = 0&#xA;				inheritanceElementList.Add(theElement.ElementID)&#xA;				for each inheritanceElementID in inheritanceElementList&#xA;					if inheritanceElementID = super.ElementID then &#xA;						hopOutOfEndlessRecursion = 1&#xA;						Session.Output(&quot;Error: Class [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot; &amp;theElement.Name&amp; &quot;] is a generalization of itself.&quot;)&#xA;						globalErrorCounter = globalErrorCounter + 1&#xA;					end if&#xA;				next&#xA;				if hopOutOfEndlessRecursion=0 then call krav16unikeNCnavnArvede(super, PropertyNames, inheritanceElementList)&#xA;			end if&#xA;		end if&#xA;	next&#xA;end sub&#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;' -----------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Sub Name: reqUmlProfile&#xA;' Author: Kent Jonsrud&#xA;' Date: 2016-08-08&#xA;' Purpose: &#xA;    '/req/uml/profile     ~ bygger på /krav/22 og /krav/25&#xA;    'Applikasjonsskjema skal modelleres ved bruk av UML-profilen definert i ISO19103:2015, og med tillegg beskrevet i dette kapittel. (Kapittel 11 i SOSI regler for UML-modellering 5.0)&#xA;&#xA;&#xA;sub reqUmlProfile(theElement)&#xA;	&#xA;	dim attr as EA.Attribute&#xA;&#xA;	'List of well known core and extension type names defined in iso 19103:2015&#xA;	dim ExtensionTypes&#xA;	Set ExtensionTypes = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;	ExtensionTypes.Add &quot;Date&quot;&#xA;	ExtensionTypes.Add &quot;Time&quot;&#xA;	ExtensionTypes.Add &quot;DateTime&quot;&#xA;	ExtensionTypes.Add &quot;CharacterString&quot;&#xA;	ExtensionTypes.Add &quot;Number&quot;&#xA;	ExtensionTypes.Add &quot;Decimal&quot;&#xA;	ExtensionTypes.Add &quot;Integer&quot;&#xA;	ExtensionTypes.Add &quot;Real&quot;&#xA;	ExtensionTypes.Add &quot;Boolean&quot;&#xA;	ExtensionTypes.Add &quot;Vector&quot;&#xA;&#xA;	ExtensionTypes.Add &quot;Bit&quot;&#xA;	ExtensionTypes.Add &quot;Digit&quot;&#xA;	ExtensionTypes.Add &quot;Sign&quot;&#xA;&#xA;	ExtensionTypes.Add &quot;NameSpace&quot;&#xA;	ExtensionTypes.Add &quot;GenericName&quot;&#xA;	ExtensionTypes.Add &quot;LocalName&quot;&#xA;	ExtensionTypes.Add &quot;ScopedName&quot;&#xA;	ExtensionTypes.Add &quot;TypeName&quot;&#xA;	ExtensionTypes.Add &quot;MemberName&quot;&#xA;&#xA;	ExtensionTypes.Add &quot;Any&quot;&#xA;&#xA;	ExtensionTypes.Add &quot;Record&quot;&#xA;	ExtensionTypes.Add &quot;RecordType&quot;&#xA;	ExtensionTypes.Add &quot;Field&quot;&#xA;	ExtensionTypes.Add &quot;FieldType&quot;&#xA;	&#xA;	'iso 19103 Annex-C types&#xA;	ExtensionTypes.Add &quot;LanguageString&quot;&#xA;	&#xA;	ExtensionTypes.Add &quot;Anchor&quot;&#xA;	ExtensionTypes.Add &quot;FileName&quot;&#xA;	ExtensionTypes.Add &quot;MediaType&quot;&#xA;	ExtensionTypes.Add &quot;URI&quot;&#xA;	&#xA;	ExtensionTypes.Add &quot;UnitOfMeasure&quot;&#xA;	ExtensionTypes.Add &quot;UomArea&quot;&#xA;	ExtensionTypes.Add &quot;UomLenght&quot;&#xA;	ExtensionTypes.Add &quot;UomAngle&quot;&#xA;	ExtensionTypes.Add &quot;UomAcceleration&quot;&#xA;	ExtensionTypes.Add &quot;UomAngularAcceleration&quot;&#xA;	ExtensionTypes.Add &quot;UomAngularSpeed&quot;&#xA;	ExtensionTypes.Add &quot;UomSpeed&quot;&#xA;	ExtensionTypes.Add &quot;UomCurrency&quot;&#xA;	ExtensionTypes.Add &quot;UomVolume&quot;&#xA;	ExtensionTypes.Add &quot;UomTime&quot;&#xA;	ExtensionTypes.Add &quot;UomScale&quot;&#xA;	ExtensionTypes.Add &quot;UomWeight&quot;&#xA;	ExtensionTypes.Add &quot;UomVelocity&quot;&#xA;&#xA;	ExtensionTypes.Add &quot;Measure&quot;&#xA;	ExtensionTypes.Add &quot;Length&quot;&#xA;	ExtensionTypes.Add &quot;Distance&quot;&#xA;	ExtensionTypes.Add &quot;Speed&quot;&#xA;	ExtensionTypes.Add &quot;Angle&quot;&#xA;	ExtensionTypes.Add &quot;Scale&quot;&#xA;	ExtensionTypes.Add &quot;TimeMeasure&quot;&#xA;	ExtensionTypes.Add &quot;Area&quot;&#xA;	ExtensionTypes.Add &quot;Volume&quot;&#xA;	ExtensionTypes.Add &quot;Currency&quot;&#xA;	ExtensionTypes.Add &quot;Weight&quot;&#xA;	ExtensionTypes.Add &quot;AngularSpeed&quot;&#xA;	ExtensionTypes.Add &quot;DirectedMeasure&quot;&#xA;	ExtensionTypes.Add &quot;Velocity&quot;&#xA;	ExtensionTypes.Add &quot;AngularVelocity&quot;&#xA;	ExtensionTypes.Add &quot;Acceleration&quot;&#xA;	ExtensionTypes.Add &quot;AngularAcceleration&quot;&#xA;	&#xA;	'well known and often used spatial types from iso 19107:2003&#xA;	ExtensionTypes.Add &quot;DirectPosition&quot;&#xA;	ExtensionTypes.Add &quot;GM_Object&quot;&#xA;	ExtensionTypes.Add &quot;GM_Primitive&quot;&#xA;	ExtensionTypes.Add &quot;GM_Complex&quot;&#xA;	ExtensionTypes.Add &quot;GM_Aggregate&quot;&#xA;	ExtensionTypes.Add &quot;GM_Point&quot;&#xA;	ExtensionTypes.Add &quot;GM_Curve&quot;&#xA;	ExtensionTypes.Add &quot;GM_Surface&quot;&#xA;	ExtensionTypes.Add &quot;GM_Solid&quot;&#xA;	ExtensionTypes.Add &quot;GM_MultiPoint&quot;&#xA;	ExtensionTypes.Add &quot;GM_MultiCurve&quot;&#xA;	ExtensionTypes.Add &quot;GM_MultiSurface&quot;&#xA;	ExtensionTypes.Add &quot;GM_MultiSolid&quot;&#xA;	ExtensionTypes.Add &quot;GM_CompositePoint&quot;&#xA;	ExtensionTypes.Add &quot;GM_CompositeCurve&quot;&#xA;	ExtensionTypes.Add &quot;GM_CompositeSurface&quot;&#xA;	ExtensionTypes.Add &quot;GM_CompositeSolid&quot;&#xA;	ExtensionTypes.Add &quot;TP_Object&quot;&#xA;	'ExtensionTypes.Add &quot;TP_Primitive&quot;&#xA;	ExtensionTypes.Add &quot;TP_Complex&quot;&#xA;	ExtensionTypes.Add &quot;TP_Node&quot;&#xA;	ExtensionTypes.Add &quot;TP_Edge&quot;&#xA;	ExtensionTypes.Add &quot;TP_Face&quot;&#xA;	ExtensionTypes.Add &quot;TP_Solid&quot;&#xA;	ExtensionTypes.Add &quot;TP_DirectedNode&quot;&#xA;	ExtensionTypes.Add &quot;TP_DirectedEdge&quot;&#xA;	ExtensionTypes.Add &quot;TP_DirectedFace&quot;&#xA;	ExtensionTypes.Add &quot;TP_DirectedSolid&quot;&#xA;	ExtensionTypes.Add &quot;GM_OrientableCurve&quot;&#xA;	ExtensionTypes.Add &quot;GM_OrientableSurface&quot;&#xA;	ExtensionTypes.Add &quot;GM_PolyhedralSurface&quot;&#xA;	ExtensionTypes.Add &quot;GM_triangulatedSurface&quot;&#xA;	ExtensionTypes.Add &quot;GM_Tin&quot;&#xA;&#xA;	'well known and often used coverage types from iso 19123:2007&#xA;	ExtensionTypes.Add &quot;CV_Coverage&quot;&#xA;	ExtensionTypes.Add &quot;CV_DiscreteCoverage&quot;&#xA;	ExtensionTypes.Add &quot;CV_DiscretePointCoverage&quot;&#xA;	ExtensionTypes.Add &quot;CV_DiscreteGridPointCoverage&quot;&#xA;	ExtensionTypes.Add &quot;CV_DiscreteCurveCoverage&quot;&#xA;	ExtensionTypes.Add &quot;CV_DiscreteSurfaceCoverage&quot;&#xA;	ExtensionTypes.Add &quot;CV_DiscreteSolidCoverage&quot;&#xA;	ExtensionTypes.Add &quot;CV_ContinousCoverage&quot;&#xA;	ExtensionTypes.Add &quot;CV_ThiessenPolygonCoverage&quot;&#xA;	'ExtensionTypes.Add &quot;CV_ContinousQuadrilateralGridCoverageCoverage&quot;&#xA;	ExtensionTypes.Add &quot;CV_ContinousQuadrilateralGridCoverage&quot;&#xA;	ExtensionTypes.Add &quot;CV_HexagonalGridCoverage&quot;&#xA;	ExtensionTypes.Add &quot;CV_TINCoverage&quot;&#xA;	ExtensionTypes.Add &quot;CV_SegmentedCurveCoverage&quot;&#xA;&#xA;	'well known and often used temporal types from iso 19108:2006/2002?&#xA;	ExtensionTypes.Add &quot;TM_Instant&quot;&#xA;	ExtensionTypes.Add &quot;TM_Period&quot;&#xA;	ExtensionTypes.Add &quot;TM_Node&quot;&#xA;	ExtensionTypes.Add &quot;TM_Edge&quot;&#xA;	ExtensionTypes.Add &quot;TM_TopologicalComplex&quot;&#xA;	&#xA;	'well known and often used observation related types from OM_Observation in iso 19156:2011&#xA;	ExtensionTypes.Add &quot;TM_Object&quot;&#xA;	ExtensionTypes.Add &quot;DQ_Element&quot;&#xA;	ExtensionTypes.Add &quot;NamedValue&quot;&#xA;	&#xA;	'well known and often used quality element types from iso 19157:2013&#xA;	ExtensionTypes.Add &quot;DQ_AbsoluteExternalPositionalAccurracy&quot;&#xA;	ExtensionTypes.Add &quot;DQ_RelativeInternalPositionalAccuracy&quot;&#xA;	ExtensionTypes.Add &quot;DQ_AccuracyOfATimeMeasurement&quot;&#xA;	ExtensionTypes.Add &quot;DQ_TemporalConsistency&quot;&#xA;	ExtensionTypes.Add &quot;DQ_TemporalValidity&quot;&#xA;	ExtensionTypes.Add &quot;DQ_ThematicClassificationCorrectness&quot;&#xA;	ExtensionTypes.Add &quot;DQ_NonQuantitativeAttributeCorrectness&quot;&#xA;	ExtensionTypes.Add &quot;DQ_QuanatitativeAttributeAccuracy&quot;&#xA;&#xA;	'well known and often used metadata element types from iso 19115-1:200x and iso 19139:2x00x&#xA;	ExtensionTypes.Add &quot;PT_FreeText&quot;&#xA;	ExtensionTypes.Add &quot;LocalisedCharacterString&quot;&#xA;	ExtensionTypes.Add &quot;MD_Resolution&quot;&#xA;	'ExtensionTypes.Add &quot;CI_Citation&quot;&#xA;	'ExtensionTypes.Add &quot;CI_Date&quot;&#xA;&#xA;	'other less known Norwegian geometry types&#xA;	ExtensionTypes.Add &quot;Punkt&quot;&#xA;	ExtensionTypes.Add &quot;Kurve&quot;&#xA;	ExtensionTypes.Add &quot;Flate&quot;&#xA;	ExtensionTypes.Add &quot;Sverm&quot;&#xA;&#xA;	'navigate through all attributes &#xA;	for each attr in theElement.Attributes&#xA;		'count number of attributes in one list&#xA;		if attr.ClassifierID = 0 then&#xA;			'check if the attribute has a well known core type&#xA;			if ExtensionTypes.IndexOf(attr.Type,0) = -1 then	&#xA;				Session.Output(&quot;Error: Class [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot; &amp;theElement.Name&amp; &quot;] has unknown type for attribute [&quot;&amp;attr.Name&amp;&quot; : &quot;&amp;attr.Type&amp;&quot;]. [/req/uml/profile]&quot;)&#xA;				globalErrorCounter = globalErrorCounter + 1 &#xA;			end if&#xA;		end if &#xA;	next&#xA;end sub&#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;'------------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Sub Name: krav18-viseAlt&#xA;' Author: Kent Jonsrud&#xA;' Date: 2016-08-09..30, 2016-09-05, 2017-01-17 (no more false positives)&#xA;' Purpose: test whether a class is showing all its content in at least one class diagram.&#xA;    '/krav/18&#xA;&#xA;sub krav18viseAlt(theElement)&#xA;&#xA;	dim diagram as EA.Diagram&#xA;	dim diagrams as EA.Collection&#xA;	dim diao as EA.DiagramObject&#xA;	dim conn as EA.Collection&#xA;	dim super as EA.Element&#xA;	dim base as EA.Collection&#xA;	dim child as EA.Collection&#xA;	dim embed as EA.Collection&#xA;	dim realiz as EA.Collection&#xA;	dim viserAlt&#xA;	viserAlt = false&#xA;	&#xA;	'navigate through all diagrams and find those the element knows&#xA;	Dim i, shownTimes&#xA;	shownTimes=0&#xA;	For i = 0 To diaoList.Count - 1&#xA;		if theElement.ElementID = diaoList.GetByIndex(i) then&#xA;			set diagram = Repository.GetDiagramByID(diagList.GetByIndex(i))&#xA;			shownTimes = shownTimes + 1&#xA;			for each diao in diagram.DiagramObjects&#xA;				if diao.ElementID = theElement.ElementID then&#xA;					exit for&#xA;				end if&#xA;			next&#xA;&#xA;			if theElement.Attributes.Count = 0 or InStr(1,diagram.ExtendedStyle,&quot;HideAtts=1&quot;) = 0 then&#xA;				if theElement.Methods.Count = 0 or InStr(1,diagram.ExtendedStyle,&quot;HideOps=1&quot;) = 0 then&#xA;					if InStr(1,diagram.ExtendedStyle,&quot;HideEStereo=1&quot;) = 0 then&#xA;						if InStr(1,diagram.ExtendedStyle,&quot;UseAlias=1&quot;) = 0 or theElement.Alias = &quot;&quot; then&#xA;							if (showAllProperties(theElement, diagram, diao)) then&#xA;								'shows all OK in this diagram, how about inherited?&#xA;								viserAlt = true&#xA;							end if&#xA;						end if&#xA;					end if&#xA;				end if&#xA;			end if&#xA;&#xA;		end if&#xA;	next&#xA;	&#xA;	if NOT viserAlt then&#xA; 		globalErrorCounter = globalErrorCounter + 1 &#xA; 		if shownTimes = 0 then&#xA;			Session.Output(&quot;Error: Class [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot;&amp;theElement.Name&amp;&quot;] is not shown in any diagram. [/krav/18]&quot;)&#xA;		else&#xA;			Session.Output(&quot;Error: Class [«&quot; &amp;theElement.Stereotype&amp; &quot;» &quot;&amp;theElement.Name&amp;&quot;] is not shown fully in at least one diagram. [/krav/18]&quot;)				&#xA;		end if&#xA;	end if&#xA;end sub&#xA;&#xA;function showAllProperties(theElement, diagram, diao)&#xA;	showAllProperties = false&#xA;	if InStr(1,diagram.ExtendedStyle,&quot;HideAtts=1&quot;) = 0 and diao.ShowPublicAttributes or InStr(1,diao.Style,&quot;AttCustom=0&quot; ) &lt;&gt; 0 or theElement.Attributes.Count = 0 then&#xA;		if InStr(1,diagram.ExtendedStyle,&quot;HideOps=1&quot;) = 0 and diao.ShowPublicOperations or InStr(1,diao.Style,&quot;OpCustom=0&quot; ) &lt;&gt; 0 or theElement.Methods.Count = 0 then&#xA;			if InStr(1,diagram.ExtendedStyle,&quot;ShowCons=0&quot;) = 0 or diao.ShowConstraints or InStr(1,diao.Style,&quot;Constraint=1&quot; ) &lt;&gt; 0 or theElement.Constraints.Count = 0 then&#xA;				' all attribute parts really shown? ...&#xA;				if InStr(1,diagram.StyleEX,&quot;VisibleAttributeDetail=1&quot; ) = 0 or theElement.Attributes.Count = 0 then&#xA;					showAllProperties = true&#xA;				end if&#xA;			end if&#xA;		end if&#xA;	end if&#xA;end function&#xA;&#xA;&#xA;&#xA;&#xA;'Recursive loop through subpackages, creating a list of all model elements and their corresponding diagrams&#xA;sub recListDiagramObjects(p)&#xA;	&#xA;	dim d as EA.Diagram&#xA;	dim Dobj as EA.DiagramObject&#xA;	for each d In p.diagrams&#xA;		for each Dobj in d.DiagramObjects&#xA;			If not diaoList.ContainsKey(Dobj.ElementID) Then&#xA;				diaoList.Add Dobj.InstanceID, Dobj.ElementID&#xA;				diagList.Add Dobj.InstanceID, Dobj.DiagramID&#xA;			end if   &#xA;		next	&#xA;	next&#xA;		&#xA;	dim subP as EA.Package&#xA;	for each subP in p.packages&#xA;	    recListDiagramObjects(subP)&#xA;	next&#xA;end sub&#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;'------------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Sub name: krav12&#xA;' Author: Magnus Karge&#xA;' Date: 20170110 &#xA;' Purpose:  sub procedure to check if a given dataType element's (element with stereotype DataType or of type DataType) associations are &#xA;'			compositions and the composition is on the correct end (datatypes must only be targets of compositions)&#xA;' 			Implementation of /krav/navning&#xA;' 			&#xA;' @param[in]: 	theElement (EA.Element). The element to check. Can only be classifier of type data type or with stereotype dataType&#xA;'				theConnector (EA.Connector). The connector/association between theElement and theElementOnOppositeSide&#xA;'				theElementOnOppositeSide (EA.Element). The classifier on the other side of the connector/association&#xA; &#xA;sub krav12(theElement, theConnector, theElementOnOppositeSide)&#xA;	dim currentElement AS EA.Element&#xA;	set currentElement = theElement&#xA;	dim elementOnOppositeSide AS EA.Element&#xA;	set elementOnOppositeSide = theElementOnOppositeSide&#xA;	dim currentConnector AS EA.Connector&#xA;	set currentConnector = theConnector&#xA;	&#xA;	dim dataTypeOnBothSides&#xA;	if (Ucase(currentElement.Stereotype) = Ucase(&quot;dataType&quot;) or currentElement.Type = &quot;DataType&quot;) and (Ucase(elementOnOppositeSide.Stereotype) = Ucase(&quot;dataType&quot;) or elementOnOppositeSide.Type = &quot;DataType&quot;) then&#xA;		dataTypeOnBothSides = true&#xA;	else	&#xA;		dataTypeOnBothSides = false&#xA;	end if&#xA;								&#xA;	'check if the elementOnOppositeSide has stereotype &quot;dataType&quot; and this side's end is no composition and not elements both sides of the association are datatypes&#xA;	if (Ucase(elementOnOppositeSide.Stereotype) = Ucase(&quot;dataType&quot;)) and not (currentConnector.ClientEnd.Aggregation = 2) and not dataTypeOnBothSides then &#xA;		Session.Output( &quot;Error: Class [«&quot;&amp;elementOnOppositeSide.Stereotype&amp;&quot;» &quot;&amp; elementOnOppositeSide.Name &amp;&quot;] has association to class [&quot; &amp; currentElement.Name &amp; &quot;] that is not a composition on &quot;&amp; currentElement.Name &amp;&quot;-side. [/krav/12]&quot;)									 &#xA;		globalErrorCounter = globalErrorCounter + 1 &#xA;	end if &#xA;&#xA;	'check if this side's element has stereotype &quot;dataType&quot; and the opposite side's end is no composition &#xA;	if (Ucase(currentElement.Stereotype) = Ucase(&quot;dataType&quot;)) and not (currentConnector.SupplierEnd.Aggregation = 2) and not dataTypeOnBothSides then &#xA;		Session.Output( &quot;Error: Class [«&quot;&amp;currentElement.Stereotype&amp;&quot;» &quot;&amp; currentElement.Name &amp;&quot;] has association to class [&quot; &amp; elementOnOppositeSide.Name &amp; &quot;] that is not a composition on &quot;&amp; elementOnOppositeSide.Name &amp;&quot;-side. [/krav/12]&quot;)									 &#xA;		globalErrorCounter = globalErrorCounter + 1 &#xA;	end if &#xA;&#xA;end sub&#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;'------------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Sub name: krav10&#xA;' Author: Magnus Karge&#xA;' Date: 20170110 &#xA;' Purpose:  sub procedure to check if the given association properties fulfill the requirements regarding&#xA;'			multiplicity on navigable ends (navigable ends shall have multiplicity)&#xA;' 			&#xA;' @param[in]: 	theElement (EA.Element). The element that &quot;ownes&quot; the association to check&#xA;'				sourceEndNavigable (CharacterString). navigable setting on association's source end&#xA;'				targetEndNavigable (CharacterString). navigable setting on association's target end&#xA;'				sourceEndName (CharacterString). role name on association's source end&#xA;'				targetEndName (CharacterString). role name on association's target end&#xA;'				sourceEndCardinality (CharacterString). multiplicity on association's source end&#xA;'				targetEndCardinality (CharacterString). multiplicity on association's target end&#xA;sub krav10(theElement, sourceEndNavigable, targetEndNavigable, sourceEndName, targetEndName, sourceEndCardinality, targetEndCardinality)&#xA;	if sourceEndNavigable = &quot;Navigable&quot; and sourceEndCardinality = &quot;&quot; then &#xA;		Session.Output( &quot;Error: Class [«&quot;&amp;theElement.Stereotype&amp;&quot;» &quot;&amp; theElement.Name &amp;&quot;] \ association role [&quot; &amp; sourceEndName &amp; &quot;] lacks multiplicity. [/krav/10]&quot;) &#xA;		globalErrorCounter = globalErrorCounter + 1 &#xA;	end if &#xA; 								 &#xA;	if targetEndNavigable = &quot;Navigable&quot; and targetEndCardinality = &quot;&quot; then &#xA;		Session.Output( &quot;Error: Class [«&quot;&amp;theElement.Stereotype&amp;&quot;» &quot;&amp; theElement.Name &amp;&quot;] \ association role [&quot; &amp; targetEndName &amp; &quot;] lacks multiplicity. [/krav/10]&quot;) &#xA;		globalErrorCounter = globalErrorCounter + 1 &#xA;	end if &#xA;end sub&#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;'------------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Sub name: krav11&#xA;' Author: Magnus Karge&#xA;' Date: 20170110 &#xA;' Purpose:  sub procedure to check if the given association has role names on navigable ends &#xA;'			(navigable ends shall have role names)&#xA;' 			&#xA;' @param[in]: 	theElement (EA.Element). The element that &quot;ownes&quot; the association to check&#xA;'				sourceEndNavigable (CharacterString). navigable setting on association's source end&#xA;'				targetEndNavigable (CharacterString). navigable setting on association's target end&#xA;'				sourceEndName (CharacterString). role name on association's source end&#xA;'				targetEndName (CharacterString). role name on association's target end&#xA;'				elementOnOppositeSide (EA.Element). The element on the opposite side of the association to check&#xA;sub krav11(theElement, sourceEndNavigable, targetEndNavigable, sourceEndName, targetEndName, elementOnOppositeSide)&#xA;	if sourceEndNavigable = &quot;Navigable&quot; and sourceEndName = &quot;&quot; then &#xA;		Session.Output( &quot;Error: Association between class [«&quot;&amp;theElement.Stereotype&amp;&quot;» &quot;&amp; theElement.Name &amp;&quot;] and class [«&quot;&amp;elementOnOppositeSide.Stereotype&amp;&quot;» &quot;&amp; elementOnOppositeSide.Name &amp; &quot;] lacks role name on navigable end on &quot;&amp; theElement.Name &amp;&quot;-side. [/krav/11]&quot;) &#xA;		globalErrorCounter = globalErrorCounter + 1 &#xA;	end if &#xA; 								 &#xA;	if targetEndNavigable = &quot;Navigable&quot; and targetEndName = &quot;&quot; then &#xA;		Session.Output( &quot;Error: Association between class [«&quot;&amp;theElement.Stereotype&amp;&quot;» &quot;&amp; theElement.Name &amp;&quot;] and class [«&quot;&amp;elementOnOppositeSide.Stereotype&amp;&quot;» &quot;&amp; elementOnOppositeSide.Name &amp; &quot;] lacks role name on navigable end on &quot;&amp; elementOnOppositeSide.Name &amp;&quot;-side. [/krav/11]&quot;) &#xA;		globalErrorCounter = globalErrorCounter + 1 &#xA;	end if &#xA;end sub&#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;'------------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Sub name: checkRoleNames&#xA;' Author: Magnus Karge&#xA;' Date: 20170110 &#xA;' Purpose:  sub procedure to check if a given association's role names start with lower case &#xA;'			(navigable ends shall have role names [krav/navning]) &#xA;' 			&#xA;' @param[in]: 	theElement (EA.Element). The element that &quot;ownes&quot; the association to check&#xA;'				sourceEndName (CharacterString). role name on association's source end&#xA;'				targetEndName (CharacterString). role name on association's target end&#xA;'				elementOnOppositeSide (EA.Element). The element on the opposite side of the association to check&#xA;sub checkRoleNames(theElement, sourceEndName, targetEndName, elementOnOppositeSide)&#xA;	if not sourceEndName = &quot;&quot; and not Left(sourceEndName,1) = LCase(Left(sourceEndName,1)) then &#xA;		Session.Output(&quot;Error: Role name [&quot; &amp; sourceEndName &amp; &quot;] on association end connected to class [&quot;&amp; theElement.Name &amp;&quot;] shall start with lowercase letter. [/krav/navning]&quot;) &#xA;		globalErrorCounter = globalErrorCounter + 1 &#xA;	end if &#xA;&#xA;	if not (targetEndName = &quot;&quot;) and not (Left(targetEndName,1) = LCase(Left(targetEndName,1))) then &#xA;		Session.Output(&quot;Error: Role name [&quot; &amp; targetEndName &amp; &quot;] on association end connected to class [&quot;&amp; elementOnOppositeSide.Name &amp;&quot;] shall start with lowercase letter. [/krav/navning]&quot;) &#xA;		globalErrorCounter = globalErrorCounter + 1 &#xA;	end if &#xA;end sub&#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;'------------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Script Name: checkEndingOfPackageName&#xA;' Author: Sara Henriksen, Åsmund Tjora	&#xA;' Purpose: check if the package name ends with a version number. The version number could be a date or a serial number. Returns an error if the version &#xA;' number contains anything other than 0-2 dots or numbers. &#xA;' Packages under development should have the text &quot;Utkast&quot; as the final element, after the version number. &#xA;' Date: 25.08.16 (original version) 10.01.17 (Updated version)&#xA;sub checkEndingOfPackageName(thePackage)&#xA;	if UCase(thePackage.Element.Stereotype)=&quot;APPLICATIONSCHEMA&quot; then&#xA;		'find the last part of the package name, after &quot;-&quot; &#xA;		dim startContent, endContent, stringContent, cleanContent 		&#xA;		&#xA;		'remove any &quot;Utkast&quot; part of the name &#xA;		cleanContent=replace(UCase(thePackage.Name), &quot;UTKAST&quot;, &quot;&quot;)&#xA;		&#xA;		endContent = len(cleanContent)&#xA;	&#xA;		startContent = InStr(cleanContent, &quot;-&quot;) &#xA;	&#xA;		stringContent = mid(cleanContent, startContent+1, endContent) 	&#xA;		dim versionNumberInPackageName&#xA;		versionNumberInPackageName = false &#xA;		'count number of dots, only allowed to use max two. &#xA;		dim dotCounter&#xA;		dotCounter = 0&#xA;&#xA;		'check that the package name contains a &quot;-&quot;, and thats it is just number(s) and &quot;.&quot; after. &#xA;		if InStr(thePackage.Name, &quot;-&quot;) then 			&#xA;			'if the string is numeric or it has dots, set the valueOk true &#xA;			if  InStr(stringContent, &quot;.&quot;)  or IsNumeric(stringContent)  then&#xA;				versionNumberInPackageName = true &#xA;				dim i, tegn &#xA;				for i = 1 to len(stringContent) &#xA;					tegn = Mid(stringContent,i,1)&#xA;					if tegn = &quot;.&quot; then&#xA;						dotCounter = dotCounter  + 1 &#xA;					end if &#xA;				next &#xA;				'count number of dots. If it's more than 2 return an error. &#xA;				if dotCounter &lt; 3 then &#xA;					versionNumberInPackageName = true&#xA;				else &#xA;					versionNumberInPackageName = false&#xA;				end if&#xA;			end if &#xA;		end if &#xA;&#xA;		'check the string for letters and symbols. If the package name contains one of the following, then return an error. &#xA;		if inStr(UCase(stringContent), &quot;A&quot;) or inStr(UCase(stringContent), &quot;B&quot;) or inStr(UCase(stringContent), &quot;C&quot;) or inStr(UCase(stringContent), &quot;D&quot;) or inStr(UCase(stringContent), &quot;E&quot;) or inStr(UCase(stringContent), &quot;F&quot;) or inStr(UCase(stringContent), &quot;G&quot;) or inStr(UCase(stringContent), &quot;H&quot;) or inStr(UCase(stringContent), &quot;I&quot;) or inStr(UCase(stringContent), &quot;J&quot;) or inStr(UCase(stringContent), &quot;K&quot;) or inStr(UCase(stringContent), &quot;L&quot;)  then &#xA;			versionNumberInPackageName = false&#xA;		end if 	&#xA;		if inStr(UCase(stringContent), &quot;M&quot;) or inStr(UCase(stringContent), &quot;N&quot;) or inStr(UCase(stringContent), &quot;O&quot;) or inStr(UCase(stringContent), &quot;P&quot;) or inStr(UCase(stringContent), &quot;Q&quot;) or inStr(UCase(stringContent), &quot;R&quot;) or inStr(UCase(stringContent), &quot;S&quot;) or inStr(UCase(stringContent), &quot;T&quot;) or inStr(UCase(stringContent), &quot;U&quot;) or inStr(UCase(stringContent), &quot;V&quot;) or inStr(UCase(stringContent), &quot;W&quot;) or inStr(UCase(stringContent), &quot;X&quot;) then          &#xA;			versionNumberInPackageName = false&#xA;		end if &#xA;		if inStr(UCase(stringContent), &quot;Y&quot;) or inStr(UCase(stringContent), &quot;Z&quot;) or inStr(UCase(stringContent), &quot;Æ&quot;) or inStr(UCase(stringContent), &quot;Ø&quot;) or inStr(UCase(stringContent), &quot;Å&quot;) then &#xA;			versionNumberInPackageName = false&#xA;		end if &#xA;		if inStr(stringContent, &quot;,&quot;) or inStr(stringContent, &quot;!&quot;) or inStr(stringContent, &quot;@&quot;) or inStr(stringContent, &quot;%&quot;) or inStr(stringContent, &quot;&amp;&quot;) or inStr(stringContent, &quot;&quot;&quot;&quot;) or inStr(stringContent, &quot;#&quot;) or inStr(stringContent, &quot;$&quot;) or inStr(stringContent, &quot;'&quot;) or inStr(stringContent, &quot;(&quot;) or inStr(stringContent, &quot;)&quot;) or inStr(stringContent, &quot;*&quot;) or inStr(stringContent, &quot;+&quot;) or inStr(stringContent, &quot;/&quot;) then        &#xA;			versionNumberInPackageName = false&#xA;		end if&#xA;		if inStr(stringContent, &quot;:&quot;) or inStr(stringContent, &quot;;&quot;) or inStr(stringContent, &quot;&gt;&quot;) or inStr(stringContent, &quot;&lt;&quot;) or inStr(stringContent, &quot;=&quot;) then&#xA;			versionNumberInPackageName = false&#xA;		end if &#xA;	&#xA;		if versionNumberInPackageName = false  then  &#xA;			Session.Output(&quot;Error: Package [&quot;&amp;thePackage.Name&amp;&quot;] does not have a name ending with a version number. [/krav/SOSI-modellregister/applikasjonsskjema/versjonsnummer]&quot;)&#xA;			globalErrorCounter = globalErrorCounter + 1	&#xA;		end if &#xA;	end if	&#xA;end sub &#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;'------------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Sub name: checkUniqueFeatureTypeNames&#xA;' Author: Magnus Karge&#xA;' Date: 20170110 &#xA;' Purpose:  sub procedure to check if a given FeatureType's name is unique within the applicationSchema&#xA;''			(the class name shall be unique within the application schema [/req/uml/feature]) &#xA;' 			&#xA;' @param[in]: 	none - uses only global variables FeatureTypeNames and FeatureTypeElementIDs&#xA;sub checkUniqueFeatureTypeNames()&#xA;	'iterate over elements in the  name and id arrays until the arrays are empty&#xA;	DO UNTIL FeatureTypeNames.count = 0 AND FeatureTypeElementIDs.count = 0 				&#xA;		dim temporaryFeatureTypeArray&#xA;		set temporaryFeatureTypeArray = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;		dim ftNameToCompare&#xA;		ftNameToCompare = FeatureTypeNames.Item(0)&#xA;		dim ftElementID&#xA;		ftElementID = FeatureTypeElementIDs.Item(0)&#xA;		dim initialElementToAdd AS EA.Element&#xA;		set initialElementToAdd = Repository.GetElementByID(ftElementID)&#xA;		temporaryFeatureTypeArray.Add(initialElementToAdd)&#xA;		FeatureTypeNames.RemoveAt(0)&#xA;		FeatureTypeElementIDs.RemoveAt(0)&#xA;		dim elementNumber&#xA;		for elementNumber = FeatureTypeNames.count - 1 to 0 step -1&#xA;			dim currentName&#xA;			currentName = FeatureTypeNames.Item(elementNumber)&#xA;			if currentName = ftNameToCompare then&#xA;				dim currentElementID&#xA;				currentElementID = FeatureTypeElementIDs.Item(elementNumber)&#xA;				dim additionalElementToAdd AS EA.Element&#xA;				set additionalElementToAdd = Repository.GetElementByID(currentElementID) &#xA;				'add element with matching name to the temporary array and remove its name and ID from the name and id array&#xA;				temporaryFeatureTypeArray.Add(additionalElementToAdd)&#xA;				FeatureTypeNames.RemoveAt(elementNumber)&#xA;				FeatureTypeElementIDs.RemoveAt(elementNumber)&#xA;			end if&#xA;		next&#xA;		&#xA;		'generate error messages according to content of the temporary array&#xA;		dim tempStoredFeatureType AS EA.Element&#xA;		if temporaryFeatureTypeArray.count &gt; 1 then&#xA;			Session.Output(&quot;Error: Found nonunique names for the following classes. [req/uml/feature]&quot;)&#xA;			'counting one error per name conflict (not one error per class with nonunique name)&#xA;			globalErrorCounter = globalErrorCounter + 1&#xA;			for each tempStoredFeatureType in temporaryFeatureTypeArray&#xA;				dim theFeatureTypePackage AS EA.Package&#xA;				set theFeatureTypePackage = Repository.GetPackageByID(tempStoredFeatureType.PackageID) &#xA;				dim theFeatureTypePackageName&#xA;				theFeatureTypePackageName = theFeatureTypePackage.Name&#xA;				Session.Output(&quot;   Class [«&quot;&amp;tempStoredFeatureType.Stereotype&amp;&quot;» &quot;&amp;tempStoredFeatureType.Name&amp;&quot;] in package [&quot;&amp;theFeatureTypePackageName&amp; &quot;]&quot;)&#xA;			next	&#xA;		end if&#xA;		&#xA;		'get the element with the first elementID and move it to the temporary array&#xA;	LOOP&#xA;	&#xA; end sub&#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;'------------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Script Name: checkUtkast&#xA;' Author: Åsmund Tjora	&#xA;' Purpose: check that packages with &quot;Utkast&quot; as part of the package name also has &quot;Utkast&quot; as SOSI_modellstatus tag and that package with the &quot;Utkast&quot;&#xA;' SOSI_modellstatus tag also has &quot;Utkast&quot; as part of the name. &#xA;' Date: 10.01.17 &#xA;sub checkUtkast(thePackage)&#xA;	dim utkastInName, utkastInTag&#xA;	'check if &quot;Utkast&quot; is part of the name&#xA;	if (len(thePackage.Name)=len(replace(UCase(thePackage.Name),&quot;UTKAST&quot;,&quot;&quot;))) then utkastInName=false else utkastInName=true&#xA;	'check if &quot;utkast&quot; is part of the SOSI_modellstatus tag&#xA;	dim taggedValuesCounter&#xA;	dim SOSI_modellstatusTag&#xA;	dim currentExistingTaggedValue&#xA;	SOSI_modellstatusTag = &quot;Missing Tag&quot;&#xA;	utkastInTag=false&#xA;	for taggedValuesCounter = 0 to thePackage.Element.TaggedValues.Count - 1&#xA;		set currentExistingTaggedValue = thePackage.Element.TaggedValues.GetAt(taggedValuesCounter)			&#xA;		if currentExistingTaggedValue.Name = &quot;SOSI_modellstatus&quot; then&#xA;			if currentExistingTaggedValue.Value = &quot;utkast&quot; then utkastInTag=true&#xA;			SOSI_modellstatusTag=currentExistingTaggedValue.Value&#xA;		end if&#xA;	next&#xA;	&#xA;	if (utkastInName = true and SOSI_modellstatusTag = &quot;&quot;) then&#xA;		Session.Output(&quot;Error: Package [«&quot;&amp;thePackage.Element.Stereotype&amp;&quot;» &quot;&amp;thePackage.Element.Name&amp; &quot;] has Utkast as part of the name, but the tag [SOSI_modellstatus] has no value. Expected value [utkast]. [/krav/SOSI-modellregister/applikasjonsskjema/standard/pakkenavn/utkast]&quot;)&#xA;		globalErrorCounter = globalErrorCounter + 1 &#xA;	elseif (utkastInName = true and SOSI_modellstatusTag = &quot;Missing Tag&quot;) then&#xA;		Session.Output(&quot;Error: Package [«&quot;&amp;thePackage.Element.Stereotype&amp;&quot;» &quot;&amp;thePackage.Element.Name&amp; &quot;] has Utkast as part of the name, but the tag [SOSI_modellstatus] is missing. [/krav/SOSI-modellregister/applikasjonsskjema/standard/pakkenavn/utkast]&quot;)&#xA;		globalErrorCounter = globalErrorCounter + 1 	&#xA;	elseif (utkastInName=true and utkastInTag=false) then&#xA;		Session.Output(&quot;Error: Package [«&quot;&amp;thePackage.Element.Stereotype&amp;&quot;» &quot;&amp;thePackage.Element.Name&amp; &quot;] has Utkast as part of the name, but the tag [SOSI_modellstatus] has the value [&quot;&amp;SOSI_modellstatusTag&amp;&quot;]. Expected value [utkast]. [/krav/SOSI-modellregister/applikasjonsskjema/standard/pakkenavn/utkast]&quot;)&#xA;		globalErrorCounter = globalErrorCounter + 1 &#xA;	end if&#xA;&#xA;	if (utkastInName=false and utkastInTag=true) then&#xA;		Session.Output(&quot;Error: Package [«&quot;&amp;thePackage.Element.Stereotype&amp;&quot;» &quot;&amp;thePackage.Element.Name&amp; &quot;] has [SOSI_modellstatus] tag with utkast value, but Utkast is not part of the package name. [/krav/SOSI-modellregister/applikasjonsskjema/standard/pakkenavn/utkast]&quot;)&#xA;		globalErrorCounter = globalErrorCounter + 1 &#xA;	end if &#xA;&#xA;	'check case of name.&#xA;	if utkastInName and globalLogLevelIsWarning then&#xA;		if not(len(replace(thePackage.Name, &quot;Utkast&quot;,&quot;&quot;))=len(replace(UCase(thePackage.Name),&quot;UTKAST&quot;,&quot;&quot;))) then&#xA;			Session.Output(&quot;Warning: Package [«&quot;&amp;thePackage.Element.Stereotype&amp;&quot;» &quot;&amp;thePackage.Element.Name&amp; &quot;]. Unexpected upper/lower case of the Utkast part of the name. [/krav/SOSI-modellregister/applikasjonsskjema/standard/pakkenavn/utkast]&quot;)&#xA;			globalWarningCounter = globalWarningCounter + 1&#xA;		end if&#xA;	end if&#xA;end sub&#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;'------------------------------------------------------------START-------------------------------------------------------------------------------------------&#xA;' Sub Name: FindInvalidElementsInPackage&#xA;' Author: Kent Jonsrud, Magnus Karge...&#xA;' Purpose: Main loop iterating all elements in the selected package and conducting tests on those elements&#xA;&#xA;sub FindInvalidElementsInPackage(package) &#xA;			&#xA; 	dim elements as EA.Collection &#xA; 	set elements = package.Elements 'collection of elements that belong to this package (classes, notes... BUT NO packages) &#xA; 	Dim myDictionary &#xA; 	dim errorsInFunctionTests &#xA; 			 &#xA; 	'check package definition &#xA; 	CheckDefinition(package) &#xA;			 &#xA;	'Iso 19103 Requirement 15 - known stereotypes for packages.&#xA;	if UCase(package.element.Stereotype) &lt;&gt; &quot;APPLICATIONSCHEMA&quot; and UCase(package.element.Stereotype) &lt;&gt; &quot;LEAF&quot; and UCase(package.element.Stereotype) &lt;&gt; &quot;&quot; then&#xA;		if globalLogLevelIsWarning then&#xA;			Session.Output(&quot;Warning: Unknown package stereotype: [«&quot; &amp;package.element.Stereotype&amp; &quot;» &quot; &amp;package.Name&amp; &quot;]. [/krav/15]&quot;)&#xA;			globalWarningCounter = globalWarningCounter + 1&#xA;		end if	&#xA;	end if&#xA;&#xA;	call checkEndingOfPackageName(package)&#xA;	call checkUtkast(package)&#xA;	&#xA;	'Iso 19103 Requirement 16 - unique (NC?)Names on subpackages within the package.&#xA;	if ClassAndPackageNames.IndexOf(UCase(package.Name),0) &lt;&gt; -1 then&#xA;		Session.Output(&quot;Error: Package [&quot; &amp;startPackageName&amp; &quot;] has non-unique subpackage name [&quot;&amp;package.Name&amp;&quot;]. [/krav/16]&quot;)				&#xA;		globalErrorCounter = globalErrorCounter + 1 &#xA;	end if&#xA;&#xA;	ClassAndPackageNames.Add UCase(package.Name)&#xA;&#xA;	'check if the package name is written correctly according to krav/navning&#xA;	checkElementName(package)&#xA; 			 &#xA;	dim packageTaggedValues as EA.Collection &#xA;	set packageTaggedValues = package.Element.TaggedValues &#xA; 			&#xA;	'only for applicationSchema packages: &#xA;	'iterate the tagged values collection and check if the applicationSchema package has a tagged value &quot;language&quot; or &quot;designation&quot; with any content [/krav/flerspråklighet/pakke]&#xA;	Call checkTVLanguageAndDesignation (package.Element, &quot;language&quot;) &#xA;	Call checkTVLanguageAndDesignation (package.Element, &quot;designation&quot;)&#xA;	'iterate the tagged values collection and check if the applicationSchema package has a tagged value &quot;version&quot; with any content [/req/uml/packaging ]	&#xA;	Call checkValueOfTVVersion( package.Element , &quot;version&quot; ) &#xA;	'iterate the tagged values collection and check if the applicationSchema package has a tagged value &quot;SOSI_modellstatus&quot; that is valid [/krav/SOSI-modellregister/ applikasjonsskjema/status]&#xA;	Call ValidValueSOSI_modellstatus( package.Element , &quot;SOSI_modellstatus&quot; )&#xA;	'iterate the diagrams and checks if there exists one or more diagram names starting with &quot;Hoveddiagram&quot; if not one has been found already [/krav/hoveddiagram/navning]&#xA;	if 	not foundHoveddiagram  then&#xA;		call CheckPackageForHoveddiagram(package)&#xA;	end if &#xA;	'iterate the diagrams in the package and count those named &quot;Hoveddiagram&quot; [/krav/hoveddiagram/detaljering/navning]&#xA;	Call FindHoveddiagramsInAS(package)&#xA;	call CheckOversiktsdiagram(package)&#xA;					&#xA;	'check packages' stereotype for right use of lower- and uppercase [/anbefaling/styleGuide] 	&#xA;	call checkStereotypes(package)		 &#xA;	&#xA;	dim packages as EA.Collection &#xA;	set packages = package.Packages 'collection of packages that belong to this package	&#xA;			&#xA;	'Navigate the package collection and call the FindNonvalidElementsInPackage function for each of them &#xA;	dim p &#xA;	for p = 0 to packages.Count - 1 &#xA;		dim currentPackage as EA.Package &#xA;		set currentPackage = packages.GetAt( p ) &#xA;		FindInvalidElementsInPackage(currentPackage) &#xA;				&#xA;		'constraints &#xA;		dim constraintPCollection as EA.Collection &#xA;		set constraintPCollection = currentPackage.Element.Constraints &#xA; 			 &#xA;		if constraintPCollection.Count &gt; 0 then &#xA;			dim constraintPCounter &#xA;			for constraintPCounter = 0 to constraintPCollection.Count - 1 					 &#xA;				dim currentPConstraint as EA.Constraint		 &#xA;				set currentPConstraint = constraintPCollection.GetAt(constraintPCounter) &#xA;								&#xA;				'check if the package got constraints that lack name or definition (/req/uml/constraint)								&#xA;				Call checkConstraint(currentPConstraint, currentPackage)&#xA;&#xA;			next&#xA;		end if	&#xA;	next &#xA; 			 &#xA; 	'------------------------------------------------------------------ &#xA;	'---ELEMENTS--- &#xA;	'------------------------------------------------------------------		 &#xA; 			 &#xA;	' Navigate the elements collection, pick the classes, find the definitions/notes and do sth. with it &#xA;	'Session.Output( &quot; number of elements in package: &quot; &amp; elements.Count) &#xA;	dim i &#xA;	for i = 0 to elements.Count - 1 &#xA;		dim currentElement as EA.Element &#xA;		set currentElement = elements.GetAt( i ) &#xA;				&#xA;		'check elements' stereotype for right use of lower- and uppercase [/anbefaling/styleGuide]&#xA;		Call checkStereotypes(currentElement)	&#xA; 				 &#xA;		'Is the currentElement of type Class and stereotype codelist or enumeration, check the initial values are numeric or not (/anbefaling/1)&#xA;		if ((currentElement.Type = &quot;Class&quot;) and (UCase(currentElement.Stereotype) = &quot;CODELIST&quot;  Or UCase(currentElement.Stereotype) = &quot;ENUMERATION&quot;) Or currentElement.Type = &quot;Enumeration&quot;) then&#xA;			call checkNumericinitialValues(currentElement)&#xA;		end if&#xA;&#xA;		' check if inherited stereotypes are all the same&#xA;		Call krav14(currentElement)&#xA;&#xA;		' ---ALL CLASSIFIERS---&#xA;		'Iso 19103 Requirement 16 - unique NCNames of all properties within the classifier.&#xA;		'Inherited properties  also included, strictly not an error situation but implicit redefinition is not well supported anyway&#xA;		if currentElement.Type = &quot;Class&quot; or currentElement.Type = &quot;DataType&quot; or currentElement.Type = &quot;Enumeration&quot; or currentElement.Type = &quot;Interface&quot; then&#xA;			if ClassAndPackageNames.IndexOf(UCase(currentElement.Name),0) &lt;&gt; -1 then&#xA;				Session.Output(&quot;Error: Class [«&quot; &amp;currentElement.Stereotype&amp; &quot;» &quot;&amp;currentElement.Name&amp;&quot;] in package: [&quot; &amp;package.Name&amp; &quot;] has non-unique name. [/krav/16]&quot;)				&#xA;				globalErrorCounter = globalErrorCounter + 1 &#xA;			end if&#xA;&#xA;			ClassAndPackageNames.Add UCase(currentElement.Name)&#xA;&#xA;			call krav16unikeNCnavn(currentElement)&#xA;		else&#xA;			' ---OTHER ARTIFACTS--- Do their names also need to be tested for uniqueness? (need to be different?)&#xA;			if currentElement.Type &lt;&gt; &quot;Note&quot; and currentElement.Type &lt;&gt; &quot;Text&quot; and currentElement.Type &lt;&gt; &quot;Boundary&quot; then&#xA;				if ClassAndPackageNames.IndexOf(UCase(currentElement.Name),0) &lt;&gt; -1 then&#xA;					Session.Output(&quot;Debug: Unexpected unknown element with non-unique name [«&quot; &amp;currentElement.Stereotype&amp; &quot;» &quot; &amp;currentElement.Name&amp; &quot;]. EA-type: [&quot; &amp;currentElement.Type&amp; &quot;]. [/krav/16]&quot;)&#xA;					'This test is dependent on where the artifact is in the test sequence &#xA;				end if&#xA;			end if&#xA;		end if&#xA;				&#xA;		'constraints &#xA;		dim constraintCollection as EA.Collection &#xA;		set constraintCollection = currentElement.Constraints &#xA;&#xA;		if constraintCollection.Count &gt; 0 then &#xA;			dim constraintCounter &#xA;			for constraintCounter = 0 to constraintCollection.Count - 1 					 &#xA;				dim currentConstraint as EA.Constraint		 &#xA;				set currentConstraint = constraintCollection.GetAt(constraintCounter) &#xA;							&#xA;				'check if the constraints lack name or definition (/req/uml/constraint)&#xA;				Call checkConstraint(currentConstraint, currentElement)&#xA;&#xA;			next&#xA;		end if		&#xA;&#xA;&#xA;&#xA;		'If the currentElement is of type Class, Enumeration or DataType continue conducting some tests. If not continue with the next element. &#xA;		if currentElement.Type = &quot;Class&quot; Or currentElement.Type = &quot;Enumeration&quot; Or currentElement.Type = &quot;DataType&quot; then &#xA; 									 &#xA;			'------------------------------------------------------------------ &#xA;			'---CLASSES---ENUMERATIONS---DATATYPE  								'   classifiers ???&#xA;			'------------------------------------------------------------------		 &#xA;			&#xA;			'add name and elementID of the featureType (class, datatype, enumeration with stereotype &lt;&lt;featureType&gt;&gt;) to the related array variables in order to check if the names are unique&#xA;			if UCase(currentElement.Stereotype) = &quot;FEATURETYPE&quot; then&#xA;				FeatureTypeNames.Add(currentElement.Name)&#xA;				FeatureTypeElementIDs.Add(currentElement.ElementID)&#xA;			end if&#xA;			&#xA;			'Iso 19103 Requirement 6 - NCNames in codelist codes.&#xA;			if (UCase(currentElement.Stereotype) = &quot;CODELIST&quot;  Or UCase(currentElement.Stereotype) = &quot;ENUMERATION&quot; Or currentElement.Type = &quot;Enumeration&quot;) then&#xA;				call krav6mnemoniskKodenavn(currentElement)&#xA;			end if&#xA;&#xA;			'Iso 19103 Requirement 7 - definition of codelist codes.&#xA;			if (UCase(currentElement.Stereotype) = &quot;CODELIST&quot;  Or UCase(currentElement.Stereotype) = &quot;ENUMERATION&quot;) then&#xA;				call krav7kodedefinisjon(currentElement)&#xA;			end if&#xA;	&#xA;			'Iso 19103 Requirement 15 - known stereotypes for classes.&#xA;			if UCase(currentElement.Stereotype) = &quot;FEATURETYPE&quot;  Or UCase(currentElement.Stereotype) = &quot;DATATYPE&quot; Or UCase(currentElement.Stereotype) = &quot;UNION&quot; or UCase(currentElement.Stereotype) = &quot;CODELIST&quot;  Or UCase(currentElement.Stereotype) = &quot;ENUMERATION&quot; Or UCase(currentElement.Stereotype) = &quot;ESTIMATED&quot; or UCase(currentElement.Stereotype) = &quot;MESSAGETYPE&quot;  Or UCase(currentElement.Stereotype) = &quot;INTERFACE&quot; then&#xA;			else&#xA;				if globalLogLevelIsWarning then&#xA;					Session.Output(&quot;Warning: Class [«&quot; &amp;currentElement.Stereotype&amp; &quot;» &quot; &amp;currentElement.Name&amp; &quot;] has unknown stereotype. [/krav/15]&quot;)&#xA;					globalWarningCounter = globalWarningCounter + 1&#xA;				end if	&#xA;			end if&#xA;&#xA;			'Iso 19103 Requirement 15 - known stereotypes for attributes.&#xA;			call krav15stereotyper(currentElement)&#xA;&#xA;			'Iso 19109 Requirement /req/uml/profile - well known types. Including Iso 19103 Requirements 22 and 25&#xA;			if (UCase(currentElement.Stereotype) = &quot;CODELIST&quot;  Or UCase(currentElement.Stereotype) = &quot;ENUMERATION&quot; Or currentElement.Type = &quot;Enumeration&quot;) then&#xA;				'codelist code type shall be empty, &lt;none&gt; or &lt;undefined&gt;&#xA;			else&#xA;				call reqUmlProfile(currentElement)&#xA;			end if&#xA;&#xA;			'Iso 19103 Requirement 18 - each classifier must show all its (inherited) properties together in at least one diagram.&#xA;			call krav18viseAlt(currentElement)&#xA;&#xA;			'check if there is a definition for the class element (call CheckDefinition function) &#xA;			CheckDefinition(currentElement) &#xA; 										 &#xA;			'check if there is there is multiple inheritance for the class element (/krav/enkelArv) &#xA;			'initialize the global variable startClass which is needed in subroutine findMultipleInheritance &#xA;			set startClass = currentElement &#xA;			loopCounterMultipleInheritance = 0&#xA;			Call findMultipleInheritance(currentElement) &#xA; 					 &#xA;			'check the structure of the value for tag values: designation, description and definition [/krav/flerspråklighet/element]&#xA;			if UCase(currentElement.Stereotype) = &quot;FEATURETYPE&quot; then &#xA;				Call structurOfTVforElement( currentElement, &quot;description&quot;)&#xA;				Call structurOfTVforElement( currentElement, &quot;designation&quot;) &#xA;				Call structurOfTVforElement( currentElement, &quot;definition&quot;)&#xA;			end if &#xA;		&#xA;			'check if the class name is written correctly according to krav/navning (name starts with capital letter)&#xA;			checkElementName(currentElement)&#xA; 											&#xA;			if ((currentElement.Type = &quot;Class&quot;) and (UCase(currentElement.Stereotype) = &quot;CODELIST&quot;)) then&#xA;				'Check if an external codelist has a real URL in the codeList tag [/krav/eksternKodeliste]&#xA;				Call checkExternalCodelists(currentElement,  &quot;asDictionary&quot;)&#xA;			end if &#xA;					&#xA;					&#xA;			dim stereotype&#xA;			stereotype = currentElement.Stereotype &#xA; 					&#xA;				&#xA;			'------------------------------------------------------------------ &#xA;			'---ATTRIBUTES--- &#xA;			'------------------------------------------------------------------					 &#xA; 						 &#xA;			' Retrieve all attributes for this element &#xA;			dim attributesCollection as EA.Collection &#xA;			set attributesCollection = currentElement.Attributes &#xA; 			 &#xA;			if attributesCollection.Count &gt; 0 then &#xA;				dim n &#xA;				for n = 0 to attributesCollection.Count - 1 					 &#xA;					dim currentAttribute as EA.Attribute		 &#xA;					set currentAttribute = attributesCollection.GetAt(n) &#xA;					'check if the attribute has a definition									 &#xA;					'Call the subfunction with currentAttribute as parameter &#xA;					CheckDefinition(currentAttribute) &#xA;					'check the structure of the value for tagged values: designation, description and definition [/krav/flerspråklighet/element]&#xA;					Call structurOfTVforElement( currentAttribute, &quot;description&quot;)&#xA;					Call structurOfTVforElement( currentAttribute, &quot;designation&quot;)&#xA;					Call structurOfTVforElement( currentAttribute, &quot;definition&quot;) &#xA;															&#xA;					'check if the attribute's name is written correctly according to krav/navning, meaning attribute name does not start with capital letter&#xA;					checkElementName(currentAttribute)&#xA;																								&#xA;					'constraints &#xA;					dim constraintACollection as EA.Collection &#xA;					set constraintACollection = currentAttribute.Constraints &#xA; 			 &#xA;					if constraintACollection.Count &gt; 0 then &#xA;						dim constraintACounter &#xA;						for constraintACounter = 0 to constraintACollection.Count - 1 					 &#xA;							dim currentAConstraint as EA.Constraint		 &#xA;							set currentAConstraint = constraintACollection.GetAt(constraintACounter) &#xA;									&#xA;							'check if the constraints lacks name or definition (/req/uml/constraint)&#xA;							Call checkConstraint(currentAConstraint, currentAttribute)&#xA;&#xA;						next&#xA;					end if		&#xA;				next &#xA;			end if	 &#xA; 					 &#xA;			'------------------------------------------------------------------ &#xA;			'---ASSOCIATIONS--- &#xA;			'------------------------------------------------------------------ &#xA; 						 &#xA;			'retrieve all associations for this element &#xA;			dim connectors as EA.Collection &#xA;			set connectors = currentElement.Connectors &#xA; 					&#xA;			'iterate the connectors &#xA;			'Session.Output(&quot;Found &quot; &amp; connectors.Count &amp; &quot; connectors for featureType &quot; &amp; currentElement.Name) &#xA;			dim connectorsCounter &#xA;			for connectorsCounter = 0 to connectors.Count - 1 &#xA;				dim currentConnector as EA.Connector &#xA;				set currentConnector = connectors.GetAt( connectorsCounter ) &#xA;							&#xA;				if currentConnector.Type = &quot;Aggregation&quot; or currentConnector.Type = &quot;Association&quot; then&#xA;								&#xA;					'target end &#xA;					dim supplierEnd as EA.ConnectorEnd&#xA;					set supplierEnd = currentConnector.SupplierEnd&#xA;	&#xA;					Call structurOfTVforElement(supplierEnd, &quot;description&quot;) &#xA;					Call structurOfTVforElement(supplierEnd, &quot;designation&quot;)&#xA;					Call structurOfTVforElement(supplierEnd, &quot;definition&quot;)&#xA;									&#xA;					'source end &#xA;					dim clientEnd as EA.ConnectorEnd&#xA;					set clientEnd = currentConnector.ClientEnd&#xA;									&#xA;					Call structurOfTVforElement(clientEnd, &quot;description&quot;) &#xA;					Call structurOfTVforElement(clientEnd, &quot;designation&quot;)&#xA;					Call structurOfTVforElement(clientEnd, &quot;definition&quot;)&#xA;				end if 		&#xA; 							&#xA;											&#xA;				dim sourceElementID &#xA;				sourceElementID = currentConnector.ClientID &#xA;				dim sourceEndNavigable  &#xA;				sourceEndNavigable = currentConnector.ClientEnd.Navigable &#xA;				dim sourceEndName &#xA;				sourceEndName = currentConnector.ClientEnd.Role &#xA;				dim sourceEndDefinition &#xA;				sourceEndDefinition = currentConnector.ClientEnd.RoleNote &#xA;				dim sourceEndCardinality		 &#xA;				sourceEndCardinality = currentConnector.ClientEnd.Cardinality &#xA; 							 &#xA;				dim targetElementID &#xA;				targetElementID = currentConnector.SupplierID &#xA;				dim targetEndNavigable  &#xA;				targetEndNavigable = currentConnector.SupplierEnd.Navigable &#xA;				dim targetEndName &#xA;				targetEndName = currentConnector.SupplierEnd.Role &#xA;				dim targetEndDefinition &#xA;				targetEndDefinition = currentConnector.SupplierEnd.RoleNote &#xA;				dim targetEndCardinality &#xA;				targetEndCardinality = currentConnector.SupplierEnd.Cardinality &#xA; 							&#xA;				'if the current element is on the connectors client side conduct some tests &#xA;				'(this condition is needed to make sure only associations where the &#xA;				'source end is connected to elements within this applicationSchema package are  &#xA;				'checked. Associations with source end connected to elements outside of this &#xA;				'package are possibly locked and not editable) &#xA;				 							 &#xA;				dim elementOnOppositeSide as EA.Element &#xA;				if currentElement.ElementID = sourceElementID and not currentConnector.Type = &quot;Realisation&quot; and not currentConnector.Type = &quot;Generalization&quot; then &#xA;					&#xA;					'------------------------------------------------------------------ &#xA;					'---'ASSOSIATION'S CONSTRAINTS--- &#xA;					'----START-------------------------------------------------------------- &#xA;					&#xA;					dim constraintRCollection as EA.Collection &#xA;					set constraintRCollection = currentConnector.Constraints &#xA;							&#xA;					if constraintRCollection.Count &gt; 0 then &#xA;						dim constraintRCounter &#xA;						for constraintRCounter = 0 to constraintRCollection.Count - 1 					 &#xA;							dim currentRConstraint as EA.Constraint		 &#xA;							set currentRConstraint = constraintRCollection.GetAt(constraintRCounter) &#xA;							'check if the connectors got constraints that lacks name or definition (/req/uml/constraint)&#xA;							Call checkConstraint(currentRConstraint, currentConnector)&#xA;						next&#xA;					end if &#xA;					&#xA;					'----END-------------------------------------------------------------- &#xA;					'---'ASSOSIATION'S CONSTRAINTS--- &#xA;					'------------------------------------------------------------------ &#xA;					&#xA;					set elementOnOppositeSide = Repository.GetElementByID(targetElementID) &#xA; 								 &#xA;					'if the connector has a name (optional according to the rules), check if it starts with capital letter &#xA;					call checkElementName(currentConnector)&#xA;					&#xA;					'check if elements on both sides of the association are classes with stereotype dataType or of element type DataType&#xA;					call krav12(currentElement, currentConnector, elementOnOppositeSide)&#xA;													&#xA;					'check if there is a definition on navigable ends (navigable association roles) of the connector &#xA;					'Call the subfunction with currentConnector as parameter &#xA;					CheckDefinition(currentConnector) &#xA; 																								 &#xA;					'check if there is multiplicity on navigable ends (krav/10)&#xA;					call krav10(currentElement, sourceEndNavigable, targetEndNavigable, sourceEndName, targetEndName, sourceEndCardinality, targetEndCardinality)&#xA;					 &#xA;					'check if there are role names on navigable ends  (krav/11)&#xA;					call krav11(currentElement, sourceEndNavigable, targetEndNavigable, sourceEndName, targetEndName, elementOnOppositeSide)&#xA;																		 &#xA;					'check if role names on connector ends start with lower case (regardless of navigability) (krav/navning)&#xA;					call checkRoleNames(currentElement, sourceEndName, targetEndName, elementOnOppositeSide)&#xA;					&#xA;				end if &#xA;			next &#xA; 						 &#xA;			'------------------------------------------------------------------ &#xA;			'---OPERATIONS--- &#xA;			'------------------------------------------------------------------ &#xA; 						 &#xA;			' Retrieve all operations for this element &#xA;			dim operationsCollection as EA.Collection &#xA;			set operationsCollection = currentElement.Methods &#xA; 			 &#xA;			if operationsCollection.Count &gt; 0 then &#xA;				dim operationCounter &#xA;				for operationCounter = 0 to operationsCollection.Count - 1 					 &#xA;					dim currentOperation as EA.Method		 &#xA;					set currentOperation = operationsCollection.GetAt(operationCounter) &#xA; 								&#xA;					'check the structure of the value for tag values: designation, description and definition [/krav/flerspråklighet/element]&#xA;					Call structurOfTVforElement(currentOperation, &quot;description&quot;)&#xA;					Call structurOfTVforElement(currentOperation, &quot;designation&quot;)&#xA;					Call structurOfTVforElement(currentOperation, &quot;definition&quot;)&#xA;								&#xA;					'check if the operations's name starts with lower case &#xA;					'TODO: this rule does not apply for constructor operation &#xA;					if not Left(currentOperation.Name,1) = LCase(Left(currentOperation.Name,1)) then &#xA;						Session.Output(&quot;Error: Operation name [&quot; &amp; currentOperation.Name &amp; &quot;] in class [&quot;&amp;currentElement.Name&amp;&quot;] shall not start with capital letter. [/krav/navning]&quot;) &#xA;						globalErrorCounter = globalErrorCounter + 1 &#xA;					end if &#xA; 								 &#xA;					'check if there is a definition for the operation (call CheckDefinition function) &#xA;					'call the subroutine with currentOperation as parameter &#xA;					CheckDefinition(currentOperation) &#xA; 																 &#xA;				next &#xA;			end if					 &#xA;		end if &#xA;  	next &#xA;end sub &#xA;'-------------------------------------------------------------END--------------------------------------------------------------------------------------------&#xA;&#xA;&#xA;'global variables &#xA;dim globalLogLevelIsWarning 'boolean variable indicating if warning log level has been choosen or not&#xA;globalLogLevelIsWarning = true 'default setting for warning log level is true&#xA; &#xA;dim startClass as EA.Element  'the class which is the starting point for searching for multiple inheritance in the findMultipleInheritance subroutine &#xA;dim loopCounterMultipleInheritance 'integer value counting number of loops while searching for multiple inheritance&#xA;dim foundHoveddiagram 'boolean to check if a diagram named Hoveddiagram is found. If found, foundHoveddiagram = true  &#xA;foundHoveddiagram = false &#xA;dim numberOfHoveddiagram 'number of diagrams named Hoveddiagram&#xA;numberOfHoveddiagram = 0&#xA;dim numberOfHoveddiagramWithAdditionalInformationInTheName 'number of diagrams with a name starting with Hoveddiagram and including additional characters  &#xA;numberOfHoveddiagramWithAdditionalInformationInTheName = 0&#xA;dim globalErrorCounter 'counter for number of errors &#xA;globalErrorCounter = 0 &#xA;dim globalWarningCounter&#xA;globalWarningCounter = 0&#xA;'Global list of all used names&#xA;'http://sparxsystems.com/enterprise_architect_user_guide/12.1/automation_and_scripting/reference.html&#xA;dim startPackageName&#xA;dim ClassAndPackageNames&#xA;Set ClassAndPackageNames = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;'Global objects for testing whether a class is showing all its content in at least one diagram. /krav/18&#xA;dim startPackage as EA.Package&#xA;dim diaoList&#xA;dim diagList&#xA;&#xA;'two global variables for checking uniqueness of FeatureType names - shall be updated in sync &#xA;dim FeatureTypeNames &#xA;Set FeatureTypeNames = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;dim FeatureTypeElementIDs&#xA;Set FeatureTypeElementIDs = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#xA;OnProjectBrowserScript &#xA;"/>
		</DataRow>
	</DataSet>
</RefData>
